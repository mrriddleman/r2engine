// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRIDPOSITION_FLAT_H_
#define FLATBUFFERS_GENERATED_GRIDPOSITION_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct GridPosition;
struct GridPositionBuilder;

struct PivotOffset;
struct PivotOffsetBuilder;

struct GridPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GridPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t z() const {
    return GetField<int32_t>(VT_Z, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           VerifyField<int32_t>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct GridPositionBuilder {
  typedef GridPosition Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(GridPosition::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(GridPosition::VT_Y, y, 0);
  }
  void add_z(int32_t z) {
    fbb_.AddElement<int32_t>(GridPosition::VT_Z, z, 0);
  }
  explicit GridPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GridPositionBuilder &operator=(const GridPositionBuilder &);
  flatbuffers::Offset<GridPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GridPosition>(end);
    return o;
  }
};

inline flatbuffers::Offset<GridPosition> CreateGridPosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t z = 0) {
  GridPositionBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct PivotOffset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PivotOffsetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct PivotOffsetBuilder {
  typedef PivotOffset Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(PivotOffset::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(PivotOffset::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(PivotOffset::VT_Z, z, 0.0f);
  }
  explicit PivotOffsetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PivotOffsetBuilder &operator=(const PivotOffsetBuilder &);
  flatbuffers::Offset<PivotOffset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PivotOffset>(end);
    return o;
  }
};

inline flatbuffers::Offset<PivotOffset> CreatePivotOffset(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  PivotOffsetBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const flat::GridPosition *GetGridPosition(const void *buf) {
  return flatbuffers::GetRoot<flat::GridPosition>(buf);
}

inline const flat::GridPosition *GetSizePrefixedGridPosition(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::GridPosition>(buf);
}

inline bool VerifyGridPositionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::GridPosition>(nullptr);
}

inline bool VerifySizePrefixedGridPositionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::GridPosition>(nullptr);
}

inline void FinishGridPositionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::GridPosition> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGridPositionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::GridPosition> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_GRIDPOSITION_FLAT_H_
