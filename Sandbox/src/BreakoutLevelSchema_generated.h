// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BREAKOUTLEVELSCHEMA_BREAKOUT_H_
#define FLATBUFFERS_GENERATED_BREAKOUTLEVELSCHEMA_BREAKOUT_H_

#include "flatbuffers/flatbuffers.h"

namespace Breakout {

struct color4;

struct Block;

struct Layout;

struct Level;

struct LevelPack;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) color4 FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;

 public:
  color4() {
    memset(this, 0, sizeof(color4));
  }
  color4(float _r, float _g, float _b, float _a)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)),
        a_(flatbuffers::EndianScalar(_a)) {
  }
  float r() const {
    return flatbuffers::EndianScalar(r_);
  }
  float g() const {
    return flatbuffers::EndianScalar(g_);
  }
  float b() const {
    return flatbuffers::EndianScalar(b_);
  }
  float a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(color4, 16);

struct Block FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SYMBOL = 4,
    VT_FILLCOLOR = 6,
    VT_HP = 8
  };
  int8_t symbol() const {
    return GetField<int8_t>(VT_SYMBOL, 0);
  }
  const color4 *fillColor() const {
    return GetStruct<const color4 *>(VT_FILLCOLOR);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SYMBOL) &&
           VerifyField<color4>(verifier, VT_FILLCOLOR) &&
           VerifyField<int32_t>(verifier, VT_HP) &&
           verifier.EndTable();
  }
};

struct BlockBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_symbol(int8_t symbol) {
    fbb_.AddElement<int8_t>(Block::VT_SYMBOL, symbol, 0);
  }
  void add_fillColor(const color4 *fillColor) {
    fbb_.AddStruct(Block::VT_FILLCOLOR, fillColor);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(Block::VT_HP, hp, 0);
  }
  explicit BlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BlockBuilder &operator=(const BlockBuilder &);
  flatbuffers::Offset<Block> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Block>(end);
    return o;
  }
};

inline flatbuffers::Offset<Block> CreateBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t symbol = 0,
    const color4 *fillColor = 0,
    int32_t hp = 0) {
  BlockBuilder builder_(_fbb);
  builder_.add_hp(hp);
  builder_.add_fillColor(fillColor);
  builder_.add_symbol(symbol);
  return builder_.Finish();
}

struct Layout FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_LAYOUT = 8
  };
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  const flatbuffers::String *layout() const {
    return GetPointer<const flatbuffers::String *>(VT_LAYOUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyOffset(verifier, VT_LAYOUT) &&
           verifier.VerifyString(layout()) &&
           verifier.EndTable();
  }
};

struct LayoutBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(Layout::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(Layout::VT_HEIGHT, height, 0);
  }
  void add_layout(flatbuffers::Offset<flatbuffers::String> layout) {
    fbb_.AddOffset(Layout::VT_LAYOUT, layout);
  }
  explicit LayoutBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LayoutBuilder &operator=(const LayoutBuilder &);
  flatbuffers::Offset<Layout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Layout>(end);
    return o;
  }
};

inline flatbuffers::Offset<Layout> CreateLayout(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    flatbuffers::Offset<flatbuffers::String> layout = 0) {
  LayoutBuilder builder_(_fbb);
  builder_.add_layout(layout);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<Layout> CreateLayoutDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    const char *layout = nullptr) {
  return Breakout::CreateLayout(
      _fbb,
      width,
      height,
      layout ? _fbb.CreateString(layout) : 0);
}

struct Level FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_HASHNAME = 6,
    VT_BLOCKS = 8,
    VT_LAYOUT = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t hashName() const {
    return GetField<uint64_t>(VT_HASHNAME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Block>> *blocks() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Block>> *>(VT_BLOCKS);
  }
  const Layout *layout() const {
    return GetPointer<const Layout *>(VT_LAYOUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_HASHNAME) &&
           VerifyOffset(verifier, VT_BLOCKS) &&
           verifier.VerifyVector(blocks()) &&
           verifier.VerifyVectorOfTables(blocks()) &&
           VerifyOffset(verifier, VT_LAYOUT) &&
           verifier.VerifyTable(layout()) &&
           verifier.EndTable();
  }
};

struct LevelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Level::VT_NAME, name);
  }
  void add_hashName(uint64_t hashName) {
    fbb_.AddElement<uint64_t>(Level::VT_HASHNAME, hashName, 0);
  }
  void add_blocks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Block>>> blocks) {
    fbb_.AddOffset(Level::VT_BLOCKS, blocks);
  }
  void add_layout(flatbuffers::Offset<Layout> layout) {
    fbb_.AddOffset(Level::VT_LAYOUT, layout);
  }
  explicit LevelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelBuilder &operator=(const LevelBuilder &);
  flatbuffers::Offset<Level> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Level>(end);
    return o;
  }
};

inline flatbuffers::Offset<Level> CreateLevel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t hashName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Block>>> blocks = 0,
    flatbuffers::Offset<Layout> layout = 0) {
  LevelBuilder builder_(_fbb);
  builder_.add_hashName(hashName);
  builder_.add_layout(layout);
  builder_.add_blocks(blocks);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Level> CreateLevelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t hashName = 0,
    const std::vector<flatbuffers::Offset<Block>> *blocks = nullptr,
    flatbuffers::Offset<Layout> layout = 0) {
  return Breakout::CreateLevel(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      hashName,
      blocks ? _fbb.CreateVector<flatbuffers::Offset<Block>>(*blocks) : 0,
      layout);
}

struct LevelPack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LEVELS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Level>> *levels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Level>> *>(VT_LEVELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LEVELS) &&
           verifier.VerifyVector(levels()) &&
           verifier.VerifyVectorOfTables(levels()) &&
           verifier.EndTable();
  }
};

struct LevelPackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_levels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Level>>> levels) {
    fbb_.AddOffset(LevelPack::VT_LEVELS, levels);
  }
  explicit LevelPackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelPackBuilder &operator=(const LevelPackBuilder &);
  flatbuffers::Offset<LevelPack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelPack>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelPack> CreateLevelPack(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Level>>> levels = 0) {
  LevelPackBuilder builder_(_fbb);
  builder_.add_levels(levels);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelPack> CreateLevelPackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Level>> *levels = nullptr) {
  return Breakout::CreateLevelPack(
      _fbb,
      levels ? _fbb.CreateVector<flatbuffers::Offset<Level>>(*levels) : 0);
}

inline const Breakout::LevelPack *GetLevelPack(const void *buf) {
  return flatbuffers::GetRoot<Breakout::LevelPack>(buf);
}

inline const Breakout::LevelPack *GetSizePrefixedLevelPack(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Breakout::LevelPack>(buf);
}

inline const char *LevelPackIdentifier() {
  return "blvl";
}

inline bool LevelPackBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LevelPackIdentifier());
}

inline bool VerifyLevelPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Breakout::LevelPack>(LevelPackIdentifier());
}

inline bool VerifySizePrefixedLevelPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Breakout::LevelPack>(LevelPackIdentifier());
}

inline const char *LevelPackExtension() {
  return "breakout_level";
}

inline void FinishLevelPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::LevelPack> root) {
  fbb.Finish(root, LevelPackIdentifier());
}

inline void FinishSizePrefixedLevelPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::LevelPack> root) {
  fbb.FinishSizePrefixed(root, LevelPackIdentifier());
}

}  // namespace Breakout

#endif  // FLATBUFFERS_GENERATED_BREAKOUTLEVELSCHEMA_BREAKOUT_H_
