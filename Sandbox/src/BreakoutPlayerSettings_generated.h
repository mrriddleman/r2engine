// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BREAKOUTPLAYERSETTINGS_BREAKOUT_H_
#define FLATBUFFERS_GENERATED_BREAKOUTPLAYERSETTINGS_BREAKOUT_H_

#include "flatbuffers/flatbuffers.h"

namespace Breakout {

struct PlayerSettings;

struct PlayerSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STARTINGLEVEL = 4,
    VT_LIVES = 6,
    VT_POINTS = 8
  };
  uint32_t startingLevel() const {
    return GetField<uint32_t>(VT_STARTINGLEVEL, 0);
  }
  uint32_t lives() const {
    return GetField<uint32_t>(VT_LIVES, 0);
  }
  uint32_t points() const {
    return GetField<uint32_t>(VT_POINTS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STARTINGLEVEL) &&
           VerifyField<uint32_t>(verifier, VT_LIVES) &&
           VerifyField<uint32_t>(verifier, VT_POINTS) &&
           verifier.EndTable();
  }
};

struct PlayerSettingsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startingLevel(uint32_t startingLevel) {
    fbb_.AddElement<uint32_t>(PlayerSettings::VT_STARTINGLEVEL, startingLevel, 0);
  }
  void add_lives(uint32_t lives) {
    fbb_.AddElement<uint32_t>(PlayerSettings::VT_LIVES, lives, 0);
  }
  void add_points(uint32_t points) {
    fbb_.AddElement<uint32_t>(PlayerSettings::VT_POINTS, points, 0);
  }
  explicit PlayerSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerSettingsBuilder &operator=(const PlayerSettingsBuilder &);
  flatbuffers::Offset<PlayerSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerSettings> CreatePlayerSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startingLevel = 0,
    uint32_t lives = 0,
    uint32_t points = 0) {
  PlayerSettingsBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_lives(lives);
  builder_.add_startingLevel(startingLevel);
  return builder_.Finish();
}

inline const Breakout::PlayerSettings *GetPlayerSettings(const void *buf) {
  return flatbuffers::GetRoot<Breakout::PlayerSettings>(buf);
}

inline const Breakout::PlayerSettings *GetSizePrefixedPlayerSettings(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Breakout::PlayerSettings>(buf);
}

inline const char *PlayerSettingsIdentifier() {
  return "bpla";
}

inline bool PlayerSettingsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PlayerSettingsIdentifier());
}

inline bool VerifyPlayerSettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Breakout::PlayerSettings>(PlayerSettingsIdentifier());
}

inline bool VerifySizePrefixedPlayerSettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Breakout::PlayerSettings>(PlayerSettingsIdentifier());
}

inline const char *PlayerSettingsExtension() {
  return "player";
}

inline void FinishPlayerSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::PlayerSettings> root) {
  fbb.Finish(root, PlayerSettingsIdentifier());
}

inline void FinishSizePrefixedPlayerSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::PlayerSettings> root) {
  fbb.FinishSizePrefixed(root, PlayerSettingsIdentifier());
}

}  // namespace Breakout

#endif  // FLATBUFFERS_GENERATED_BREAKOUTPLAYERSETTINGS_BREAKOUT_H_
