// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BREAKOUTHIGHSCORESCHEMA_BREAKOUT_H_
#define FLATBUFFERS_GENERATED_BREAKOUTHIGHSCORESCHEMA_BREAKOUT_H_

#include "flatbuffers/flatbuffers.h"

namespace Breakout {

struct HighScore;

struct HighScores;

struct HighScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_POINTS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t points() const {
    return GetField<uint32_t>(VT_POINTS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_POINTS) &&
           verifier.EndTable();
  }
};

struct HighScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HighScore::VT_NAME, name);
  }
  void add_points(uint32_t points) {
    fbb_.AddElement<uint32_t>(HighScore::VT_POINTS, points, 0);
  }
  explicit HighScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HighScoreBuilder &operator=(const HighScoreBuilder &);
  flatbuffers::Offset<HighScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HighScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<HighScore> CreateHighScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t points = 0) {
  HighScoreBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<HighScore> CreateHighScoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t points = 0) {
  return Breakout::CreateHighScore(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      points);
}

struct HighScores FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SCORES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<HighScore>> *scores() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HighScore>> *>(VT_SCORES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCORES) &&
           verifier.VerifyVector(scores()) &&
           verifier.VerifyVectorOfTables(scores()) &&
           verifier.EndTable();
  }
};

struct HighScoresBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_scores(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HighScore>>> scores) {
    fbb_.AddOffset(HighScores::VT_SCORES, scores);
  }
  explicit HighScoresBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HighScoresBuilder &operator=(const HighScoresBuilder &);
  flatbuffers::Offset<HighScores> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HighScores>(end);
    return o;
  }
};

inline flatbuffers::Offset<HighScores> CreateHighScores(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HighScore>>> scores = 0) {
  HighScoresBuilder builder_(_fbb);
  builder_.add_scores(scores);
  return builder_.Finish();
}

inline flatbuffers::Offset<HighScores> CreateHighScoresDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<HighScore>> *scores = nullptr) {
  return Breakout::CreateHighScores(
      _fbb,
      scores ? _fbb.CreateVector<flatbuffers::Offset<HighScore>>(*scores) : 0);
}

inline const Breakout::HighScores *GetHighScores(const void *buf) {
  return flatbuffers::GetRoot<Breakout::HighScores>(buf);
}

inline const Breakout::HighScores *GetSizePrefixedHighScores(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Breakout::HighScores>(buf);
}

inline const char *HighScoresIdentifier() {
  return "bsco";
}

inline bool HighScoresBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, HighScoresIdentifier());
}

inline bool VerifyHighScoresBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Breakout::HighScores>(HighScoresIdentifier());
}

inline bool VerifySizePrefixedHighScoresBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Breakout::HighScores>(HighScoresIdentifier());
}

inline const char *HighScoresExtension() {
  return "scores";
}

inline void FinishHighScoresBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::HighScores> root) {
  fbb.Finish(root, HighScoresIdentifier());
}

inline void FinishSizePrefixedHighScoresBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::HighScores> root) {
  fbb.FinishSizePrefixed(root, HighScoresIdentifier());
}

}  // namespace Breakout

#endif  // FLATBUFFERS_GENERATED_BREAKOUTHIGHSCORESCHEMA_BREAKOUT_H_
