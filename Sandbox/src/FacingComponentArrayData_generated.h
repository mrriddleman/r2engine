// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FACINGCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_FACINGCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct FacingComponentData;
struct FacingComponentDataBuilder;

struct FacingComponentArrayData;
struct FacingComponentArrayDataBuilder;

struct FacingComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FacingComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct FacingComponentDataBuilder {
  typedef FacingComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(FacingComponentData::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(FacingComponentData::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(FacingComponentData::VT_Z, z, 0.0f);
  }
  explicit FacingComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FacingComponentDataBuilder &operator=(const FacingComponentDataBuilder &);
  flatbuffers::Offset<FacingComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FacingComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FacingComponentData> CreateFacingComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  FacingComponentDataBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FacingComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FacingComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FACINGCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::FacingComponentData>> *facingComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::FacingComponentData>> *>(VT_FACINGCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FACINGCOMPONENTARRAY) &&
           verifier.VerifyVector(facingComponentArray()) &&
           verifier.VerifyVectorOfTables(facingComponentArray()) &&
           verifier.EndTable();
  }
};

struct FacingComponentArrayDataBuilder {
  typedef FacingComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_facingComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::FacingComponentData>>> facingComponentArray) {
    fbb_.AddOffset(FacingComponentArrayData::VT_FACINGCOMPONENTARRAY, facingComponentArray);
  }
  explicit FacingComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FacingComponentArrayDataBuilder &operator=(const FacingComponentArrayDataBuilder &);
  flatbuffers::Offset<FacingComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FacingComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FacingComponentArrayData> CreateFacingComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::FacingComponentData>>> facingComponentArray = 0) {
  FacingComponentArrayDataBuilder builder_(_fbb);
  builder_.add_facingComponentArray(facingComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<FacingComponentArrayData> CreateFacingComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::FacingComponentData>> *facingComponentArray = nullptr) {
  auto facingComponentArray__ = facingComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::FacingComponentData>>(*facingComponentArray) : 0;
  return flat::CreateFacingComponentArrayData(
      _fbb,
      facingComponentArray__);
}

inline const flat::FacingComponentArrayData *GetFacingComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::FacingComponentArrayData>(buf);
}

inline const flat::FacingComponentArrayData *GetSizePrefixedFacingComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::FacingComponentArrayData>(buf);
}

inline bool VerifyFacingComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::FacingComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedFacingComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::FacingComponentArrayData>(nullptr);
}

inline void FinishFacingComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::FacingComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFacingComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::FacingComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_FACINGCOMPONENTARRAYDATA_FLAT_H_
