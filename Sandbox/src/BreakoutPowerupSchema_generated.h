// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BREAKOUTPOWERUPSCHEMA_BREAKOUT_H_
#define FLATBUFFERS_GENERATED_BREAKOUTPOWERUPSCHEMA_BREAKOUT_H_

#include "flatbuffers/flatbuffers.h"

namespace Breakout {

struct Powerup;

struct Powerups;

enum BreakoutPowerupType {
  BreakoutPowerupType_BPUT_INCREASE_BALL_SIZE = 0,
  BreakoutPowerupType_BPUT_INCREASE_PADDLE_SIZE = 1,
  BreakoutPowerupType_BPUT_MULTIBALL = 2,
  BreakoutPowerupType_BPUT_LIFE_UP = 3,
  BreakoutPowerupType_BPUT_IGNORE_COLLISIONS = 4,
  BreakoutPowerupType_BPUT_PADDLE_LASER = 5,
  BreakoutPowerupType_BPUT_DECREASE_BALL_SIZE = 6,
  BreakoutPowerupType_BPUT_DECREASE_PADDLE_SIZE = 7,
  BreakoutPowerupType_BPUT_INCREASE_BRICK_HP = 8,
  BreakoutPowerupType_MIN = BreakoutPowerupType_BPUT_INCREASE_BALL_SIZE,
  BreakoutPowerupType_MAX = BreakoutPowerupType_BPUT_INCREASE_BRICK_HP
};

inline const BreakoutPowerupType (&EnumValuesBreakoutPowerupType())[9] {
  static const BreakoutPowerupType values[] = {
    BreakoutPowerupType_BPUT_INCREASE_BALL_SIZE,
    BreakoutPowerupType_BPUT_INCREASE_PADDLE_SIZE,
    BreakoutPowerupType_BPUT_MULTIBALL,
    BreakoutPowerupType_BPUT_LIFE_UP,
    BreakoutPowerupType_BPUT_IGNORE_COLLISIONS,
    BreakoutPowerupType_BPUT_PADDLE_LASER,
    BreakoutPowerupType_BPUT_DECREASE_BALL_SIZE,
    BreakoutPowerupType_BPUT_DECREASE_PADDLE_SIZE,
    BreakoutPowerupType_BPUT_INCREASE_BRICK_HP
  };
  return values;
}

inline const char * const *EnumNamesBreakoutPowerupType() {
  static const char * const names[] = {
    "BPUT_INCREASE_BALL_SIZE",
    "BPUT_INCREASE_PADDLE_SIZE",
    "BPUT_MULTIBALL",
    "BPUT_LIFE_UP",
    "BPUT_IGNORE_COLLISIONS",
    "BPUT_PADDLE_LASER",
    "BPUT_DECREASE_BALL_SIZE",
    "BPUT_DECREASE_PADDLE_SIZE",
    "BPUT_INCREASE_BRICK_HP",
    nullptr
  };
  return names;
}

inline const char *EnumNameBreakoutPowerupType(BreakoutPowerupType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesBreakoutPowerupType()[index];
}

struct Powerup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_SIZEMULTIPLIER = 6,
    VT_INCREASEAMOUNT = 8
  };
  BreakoutPowerupType type() const {
    return static_cast<BreakoutPowerupType>(GetField<int8_t>(VT_TYPE, 0));
  }
  float sizeMultiplier() const {
    return GetField<float>(VT_SIZEMULTIPLIER, 0.0f);
  }
  int32_t increaseAmount() const {
    return GetField<int32_t>(VT_INCREASEAMOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<float>(verifier, VT_SIZEMULTIPLIER) &&
           VerifyField<int32_t>(verifier, VT_INCREASEAMOUNT) &&
           verifier.EndTable();
  }
};

struct PowerupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(BreakoutPowerupType type) {
    fbb_.AddElement<int8_t>(Powerup::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_sizeMultiplier(float sizeMultiplier) {
    fbb_.AddElement<float>(Powerup::VT_SIZEMULTIPLIER, sizeMultiplier, 0.0f);
  }
  void add_increaseAmount(int32_t increaseAmount) {
    fbb_.AddElement<int32_t>(Powerup::VT_INCREASEAMOUNT, increaseAmount, 0);
  }
  explicit PowerupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PowerupBuilder &operator=(const PowerupBuilder &);
  flatbuffers::Offset<Powerup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Powerup>(end);
    return o;
  }
};

inline flatbuffers::Offset<Powerup> CreatePowerup(
    flatbuffers::FlatBufferBuilder &_fbb,
    BreakoutPowerupType type = BreakoutPowerupType_BPUT_INCREASE_BALL_SIZE,
    float sizeMultiplier = 0.0f,
    int32_t increaseAmount = 0) {
  PowerupBuilder builder_(_fbb);
  builder_.add_increaseAmount(increaseAmount);
  builder_.add_sizeMultiplier(sizeMultiplier);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Powerups FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POWERUPS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Powerup>> *powerups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Powerup>> *>(VT_POWERUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POWERUPS) &&
           verifier.VerifyVector(powerups()) &&
           verifier.VerifyVectorOfTables(powerups()) &&
           verifier.EndTable();
  }
};

struct PowerupsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_powerups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Powerup>>> powerups) {
    fbb_.AddOffset(Powerups::VT_POWERUPS, powerups);
  }
  explicit PowerupsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PowerupsBuilder &operator=(const PowerupsBuilder &);
  flatbuffers::Offset<Powerups> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Powerups>(end);
    return o;
  }
};

inline flatbuffers::Offset<Powerups> CreatePowerups(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Powerup>>> powerups = 0) {
  PowerupsBuilder builder_(_fbb);
  builder_.add_powerups(powerups);
  return builder_.Finish();
}

inline flatbuffers::Offset<Powerups> CreatePowerupsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Powerup>> *powerups = nullptr) {
  return Breakout::CreatePowerups(
      _fbb,
      powerups ? _fbb.CreateVector<flatbuffers::Offset<Powerup>>(*powerups) : 0);
}

inline const Breakout::Powerups *GetPowerups(const void *buf) {
  return flatbuffers::GetRoot<Breakout::Powerups>(buf);
}

inline const Breakout::Powerups *GetSizePrefixedPowerups(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Breakout::Powerups>(buf);
}

inline const char *PowerupsIdentifier() {
  return "bpwr";
}

inline bool PowerupsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PowerupsIdentifier());
}

inline bool VerifyPowerupsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Breakout::Powerups>(PowerupsIdentifier());
}

inline bool VerifySizePrefixedPowerupsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Breakout::Powerups>(PowerupsIdentifier());
}

inline const char *PowerupsExtension() {
  return "powerup";
}

inline void FinishPowerupsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::Powerups> root) {
  fbb.Finish(root, PowerupsIdentifier());
}

inline void FinishSizePrefixedPowerupsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Breakout::Powerups> root) {
  fbb.FinishSizePrefixed(root, PowerupsIdentifier());
}

}  // namespace Breakout

#endif  // FLATBUFFERS_GENERATED_BREAKOUTPOWERUPSCHEMA_BREAKOUT_H_
