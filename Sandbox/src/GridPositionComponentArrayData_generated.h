// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRIDPOSITIONCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_GRIDPOSITIONCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "GridPosition_generated.h"

namespace flat {

struct GridPositionComponentData;
struct GridPositionComponentDataBuilder;

struct GridPositionComponentArrayData;
struct GridPositionComponentArrayDataBuilder;

struct GridPositionComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GridPositionComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCALGRIDPOSITION = 4,
    VT_GLOBALGRIDPOSITION = 6
  };
  const flat::GridPosition *localGridPosition() const {
    return GetPointer<const flat::GridPosition *>(VT_LOCALGRIDPOSITION);
  }
  const flat::GridPosition *globalGridPosition() const {
    return GetPointer<const flat::GridPosition *>(VT_GLOBALGRIDPOSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOCALGRIDPOSITION) &&
           verifier.VerifyTable(localGridPosition()) &&
           VerifyOffset(verifier, VT_GLOBALGRIDPOSITION) &&
           verifier.VerifyTable(globalGridPosition()) &&
           verifier.EndTable();
  }
};

struct GridPositionComponentDataBuilder {
  typedef GridPositionComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_localGridPosition(flatbuffers::Offset<flat::GridPosition> localGridPosition) {
    fbb_.AddOffset(GridPositionComponentData::VT_LOCALGRIDPOSITION, localGridPosition);
  }
  void add_globalGridPosition(flatbuffers::Offset<flat::GridPosition> globalGridPosition) {
    fbb_.AddOffset(GridPositionComponentData::VT_GLOBALGRIDPOSITION, globalGridPosition);
  }
  explicit GridPositionComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GridPositionComponentDataBuilder &operator=(const GridPositionComponentDataBuilder &);
  flatbuffers::Offset<GridPositionComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GridPositionComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GridPositionComponentData> CreateGridPositionComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::GridPosition> localGridPosition = 0,
    flatbuffers::Offset<flat::GridPosition> globalGridPosition = 0) {
  GridPositionComponentDataBuilder builder_(_fbb);
  builder_.add_globalGridPosition(globalGridPosition);
  builder_.add_localGridPosition(localGridPosition);
  return builder_.Finish();
}

struct GridPositionComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GridPositionComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRIDPOSITIONCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::GridPositionComponentData>> *gridPositionComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::GridPositionComponentData>> *>(VT_GRIDPOSITIONCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GRIDPOSITIONCOMPONENTARRAY) &&
           verifier.VerifyVector(gridPositionComponentArray()) &&
           verifier.VerifyVectorOfTables(gridPositionComponentArray()) &&
           verifier.EndTable();
  }
};

struct GridPositionComponentArrayDataBuilder {
  typedef GridPositionComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gridPositionComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::GridPositionComponentData>>> gridPositionComponentArray) {
    fbb_.AddOffset(GridPositionComponentArrayData::VT_GRIDPOSITIONCOMPONENTARRAY, gridPositionComponentArray);
  }
  explicit GridPositionComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GridPositionComponentArrayDataBuilder &operator=(const GridPositionComponentArrayDataBuilder &);
  flatbuffers::Offset<GridPositionComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GridPositionComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GridPositionComponentArrayData> CreateGridPositionComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::GridPositionComponentData>>> gridPositionComponentArray = 0) {
  GridPositionComponentArrayDataBuilder builder_(_fbb);
  builder_.add_gridPositionComponentArray(gridPositionComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<GridPositionComponentArrayData> CreateGridPositionComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::GridPositionComponentData>> *gridPositionComponentArray = nullptr) {
  auto gridPositionComponentArray__ = gridPositionComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::GridPositionComponentData>>(*gridPositionComponentArray) : 0;
  return flat::CreateGridPositionComponentArrayData(
      _fbb,
      gridPositionComponentArray__);
}

inline const flat::GridPositionComponentArrayData *GetGridPositionComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::GridPositionComponentArrayData>(buf);
}

inline const flat::GridPositionComponentArrayData *GetSizePrefixedGridPositionComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::GridPositionComponentArrayData>(buf);
}

inline bool VerifyGridPositionComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::GridPositionComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedGridPositionComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::GridPositionComponentArrayData>(nullptr);
}

inline void FinishGridPositionComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::GridPositionComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGridPositionComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::GridPositionComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_GRIDPOSITIONCOMPONENTARRAYDATA_FLAT_H_
