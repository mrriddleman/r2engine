// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTUREMETADATA_FLAT_H_
#define FLATBUFFERS_GENERATED_TEXTUREMETADATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct MipInfo;
struct MipInfoBuilder;

struct TextureMetaData;
struct TextureMetaDataBuilder;

enum CompressionMode {
  CompressionMode_NONE = 0,
  CompressionMode_LZ4 = 1,
  CompressionMode_MIN = CompressionMode_NONE,
  CompressionMode_MAX = CompressionMode_LZ4
};

inline const CompressionMode (&EnumValuesCompressionMode())[2] {
  static const CompressionMode values[] = {
    CompressionMode_NONE,
    CompressionMode_LZ4
  };
  return values;
}

inline const char * const *EnumNamesCompressionMode() {
  static const char * const names[3] = {
    "NONE",
    "LZ4",
    nullptr
  };
  return names;
}

inline const char *EnumNameCompressionMode(CompressionMode e) {
  if (flatbuffers::IsOutRange(e, CompressionMode_NONE, CompressionMode_LZ4)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCompressionMode()[index];
}

enum TextureFormat {
  TextureFormat_UNKNOWN = 0,
  TextureFormat_RGBA8 = 1,
  TextureFormat_RGB8 = 2,
  TextureFormat_RGBA32 = 3,
  TextureFormat_RGB16 = 4,
  TextureFormat_R8 = 5,
  TextureFormat_R32 = 6,
  TextureFormat_SRGB8 = 7,
  TextureFormat_SRGBA8 = 8,
  TextureFormat_COMPRESSED_RGBA_S3TC_DXT1_EXT = 9,
  TextureFormat_DEPTH16 = 10,
  TextureFormat_DEPTH32 = 11,
  TextureFormat_MIN = TextureFormat_UNKNOWN,
  TextureFormat_MAX = TextureFormat_DEPTH32
};

inline const TextureFormat (&EnumValuesTextureFormat())[12] {
  static const TextureFormat values[] = {
    TextureFormat_UNKNOWN,
    TextureFormat_RGBA8,
    TextureFormat_RGB8,
    TextureFormat_RGBA32,
    TextureFormat_RGB16,
    TextureFormat_R8,
    TextureFormat_R32,
    TextureFormat_SRGB8,
    TextureFormat_SRGBA8,
    TextureFormat_COMPRESSED_RGBA_S3TC_DXT1_EXT,
    TextureFormat_DEPTH16,
    TextureFormat_DEPTH32
  };
  return values;
}

inline const char * const *EnumNamesTextureFormat() {
  static const char * const names[13] = {
    "UNKNOWN",
    "RGBA8",
    "RGB8",
    "RGBA32",
    "RGB16",
    "R8",
    "R32",
    "SRGB8",
    "SRGBA8",
    "COMPRESSED_RGBA_S3TC_DXT1_EXT",
    "DEPTH16",
    "DEPTH32",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextureFormat(TextureFormat e) {
  if (flatbuffers::IsOutRange(e, TextureFormat_UNKNOWN, TextureFormat_DEPTH32)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTextureFormat()[index];
}

struct MipInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MipInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_COMPRESSEDSIZE = 8,
    VT_ORIGINALSIZE = 10
  };
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(uint32_t _width) {
    return SetField<uint32_t>(VT_WIDTH, _width, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(uint32_t _height) {
    return SetField<uint32_t>(VT_HEIGHT, _height, 0);
  }
  uint32_t compressedSize() const {
    return GetField<uint32_t>(VT_COMPRESSEDSIZE, 0);
  }
  bool mutate_compressedSize(uint32_t _compressedSize) {
    return SetField<uint32_t>(VT_COMPRESSEDSIZE, _compressedSize, 0);
  }
  uint32_t originalSize() const {
    return GetField<uint32_t>(VT_ORIGINALSIZE, 0);
  }
  bool mutate_originalSize(uint32_t _originalSize) {
    return SetField<uint32_t>(VT_ORIGINALSIZE, _originalSize, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint32_t>(verifier, VT_COMPRESSEDSIZE) &&
           VerifyField<uint32_t>(verifier, VT_ORIGINALSIZE) &&
           verifier.EndTable();
  }
};

struct MipInfoBuilder {
  typedef MipInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(MipInfo::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(MipInfo::VT_HEIGHT, height, 0);
  }
  void add_compressedSize(uint32_t compressedSize) {
    fbb_.AddElement<uint32_t>(MipInfo::VT_COMPRESSEDSIZE, compressedSize, 0);
  }
  void add_originalSize(uint32_t originalSize) {
    fbb_.AddElement<uint32_t>(MipInfo::VT_ORIGINALSIZE, originalSize, 0);
  }
  explicit MipInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MipInfoBuilder &operator=(const MipInfoBuilder &);
  flatbuffers::Offset<MipInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MipInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MipInfo> CreateMipInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t compressedSize = 0,
    uint32_t originalSize = 0) {
  MipInfoBuilder builder_(_fbb);
  builder_.add_originalSize(originalSize);
  builder_.add_compressedSize(compressedSize);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

struct TextureMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextureMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGINALPATH = 4,
    VT_TEXTURESIZE = 6,
    VT_TEXTUREFORMAT = 8,
    VT_COMPRESSIONMODE = 10,
    VT_MIPS = 12
  };
  const flatbuffers::String *originalPath() const {
    return GetPointer<const flatbuffers::String *>(VT_ORIGINALPATH);
  }
  flatbuffers::String *mutable_originalPath() {
    return GetPointer<flatbuffers::String *>(VT_ORIGINALPATH);
  }
  uint64_t textureSize() const {
    return GetField<uint64_t>(VT_TEXTURESIZE, 0);
  }
  bool mutate_textureSize(uint64_t _textureSize) {
    return SetField<uint64_t>(VT_TEXTURESIZE, _textureSize, 0);
  }
  flat::TextureFormat textureFormat() const {
    return static_cast<flat::TextureFormat>(GetField<uint16_t>(VT_TEXTUREFORMAT, 0));
  }
  bool mutate_textureFormat(flat::TextureFormat _textureFormat) {
    return SetField<uint16_t>(VT_TEXTUREFORMAT, static_cast<uint16_t>(_textureFormat), 0);
  }
  flat::CompressionMode compressionMode() const {
    return static_cast<flat::CompressionMode>(GetField<uint8_t>(VT_COMPRESSIONMODE, 0));
  }
  bool mutate_compressionMode(flat::CompressionMode _compressionMode) {
    return SetField<uint8_t>(VT_COMPRESSIONMODE, static_cast<uint8_t>(_compressionMode), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>> *mips() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>> *>(VT_MIPS);
  }
  flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>> *mutable_mips() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>> *>(VT_MIPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ORIGINALPATH) &&
           verifier.VerifyString(originalPath()) &&
           VerifyField<uint64_t>(verifier, VT_TEXTURESIZE) &&
           VerifyField<uint16_t>(verifier, VT_TEXTUREFORMAT) &&
           VerifyField<uint8_t>(verifier, VT_COMPRESSIONMODE) &&
           VerifyOffset(verifier, VT_MIPS) &&
           verifier.VerifyVector(mips()) &&
           verifier.VerifyVectorOfTables(mips()) &&
           verifier.EndTable();
  }
};

struct TextureMetaDataBuilder {
  typedef TextureMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_originalPath(flatbuffers::Offset<flatbuffers::String> originalPath) {
    fbb_.AddOffset(TextureMetaData::VT_ORIGINALPATH, originalPath);
  }
  void add_textureSize(uint64_t textureSize) {
    fbb_.AddElement<uint64_t>(TextureMetaData::VT_TEXTURESIZE, textureSize, 0);
  }
  void add_textureFormat(flat::TextureFormat textureFormat) {
    fbb_.AddElement<uint16_t>(TextureMetaData::VT_TEXTUREFORMAT, static_cast<uint16_t>(textureFormat), 0);
  }
  void add_compressionMode(flat::CompressionMode compressionMode) {
    fbb_.AddElement<uint8_t>(TextureMetaData::VT_COMPRESSIONMODE, static_cast<uint8_t>(compressionMode), 0);
  }
  void add_mips(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>>> mips) {
    fbb_.AddOffset(TextureMetaData::VT_MIPS, mips);
  }
  explicit TextureMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureMetaDataBuilder &operator=(const TextureMetaDataBuilder &);
  flatbuffers::Offset<TextureMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextureMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextureMetaData> CreateTextureMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> originalPath = 0,
    uint64_t textureSize = 0,
    flat::TextureFormat textureFormat = flat::TextureFormat_UNKNOWN,
    flat::CompressionMode compressionMode = flat::CompressionMode_NONE,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MipInfo>>> mips = 0) {
  TextureMetaDataBuilder builder_(_fbb);
  builder_.add_textureSize(textureSize);
  builder_.add_mips(mips);
  builder_.add_originalPath(originalPath);
  builder_.add_textureFormat(textureFormat);
  builder_.add_compressionMode(compressionMode);
  return builder_.Finish();
}

inline flatbuffers::Offset<TextureMetaData> CreateTextureMetaDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *originalPath = nullptr,
    uint64_t textureSize = 0,
    flat::TextureFormat textureFormat = flat::TextureFormat_UNKNOWN,
    flat::CompressionMode compressionMode = flat::CompressionMode_NONE,
    const std::vector<flatbuffers::Offset<flat::MipInfo>> *mips = nullptr) {
  auto originalPath__ = originalPath ? _fbb.CreateString(originalPath) : 0;
  auto mips__ = mips ? _fbb.CreateVector<flatbuffers::Offset<flat::MipInfo>>(*mips) : 0;
  return flat::CreateTextureMetaData(
      _fbb,
      originalPath__,
      textureSize,
      textureFormat,
      compressionMode,
      mips__);
}

inline const flat::TextureMetaData *GetTextureMetaData(const void *buf) {
  return flatbuffers::GetRoot<flat::TextureMetaData>(buf);
}

inline const flat::TextureMetaData *GetSizePrefixedTextureMetaData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::TextureMetaData>(buf);
}

inline TextureMetaData *GetMutableTextureMetaData(void *buf) {
  return flatbuffers::GetMutableRoot<TextureMetaData>(buf);
}

inline const char *TextureMetaDataIdentifier() {
  return "rtex";
}

inline bool TextureMetaDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TextureMetaDataIdentifier());
}

inline bool VerifyTextureMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::TextureMetaData>(TextureMetaDataIdentifier());
}

inline bool VerifySizePrefixedTextureMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::TextureMetaData>(TextureMetaDataIdentifier());
}

inline const char *TextureMetaDataExtension() {
  return "rtex";
}

inline void FinishTextureMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TextureMetaData> root) {
  fbb.Finish(root, TextureMetaDataIdentifier());
}

inline void FinishSizePrefixedTextureMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TextureMetaData> root) {
  fbb.FinishSizePrefixed(root, TextureMetaDataIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_TEXTUREMETADATA_FLAT_H_
