// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RANIMATIONMETADATA_FLAT_H_
#define FLATBUFFERS_GENERATED_RANIMATIONMETADATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct RChannelMetaData;
struct RChannelMetaDataBuilder;

struct RAnimationMetaData;
struct RAnimationMetaDataBuilder;

struct RChannelMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RChannelMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMPOSITIONKEYS = 4,
    VT_NUMSCALEKEYS = 6,
    VT_NUMROTATIONKEYS = 8
  };
  uint32_t numPositionKeys() const {
    return GetField<uint32_t>(VT_NUMPOSITIONKEYS, 0);
  }
  bool mutate_numPositionKeys(uint32_t _numPositionKeys) {
    return SetField<uint32_t>(VT_NUMPOSITIONKEYS, _numPositionKeys, 0);
  }
  uint32_t numScaleKeys() const {
    return GetField<uint32_t>(VT_NUMSCALEKEYS, 0);
  }
  bool mutate_numScaleKeys(uint32_t _numScaleKeys) {
    return SetField<uint32_t>(VT_NUMSCALEKEYS, _numScaleKeys, 0);
  }
  uint32_t numRotationKeys() const {
    return GetField<uint32_t>(VT_NUMROTATIONKEYS, 0);
  }
  bool mutate_numRotationKeys(uint32_t _numRotationKeys) {
    return SetField<uint32_t>(VT_NUMROTATIONKEYS, _numRotationKeys, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUMPOSITIONKEYS) &&
           VerifyField<uint32_t>(verifier, VT_NUMSCALEKEYS) &&
           VerifyField<uint32_t>(verifier, VT_NUMROTATIONKEYS) &&
           verifier.EndTable();
  }
};

struct RChannelMetaDataBuilder {
  typedef RChannelMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_numPositionKeys(uint32_t numPositionKeys) {
    fbb_.AddElement<uint32_t>(RChannelMetaData::VT_NUMPOSITIONKEYS, numPositionKeys, 0);
  }
  void add_numScaleKeys(uint32_t numScaleKeys) {
    fbb_.AddElement<uint32_t>(RChannelMetaData::VT_NUMSCALEKEYS, numScaleKeys, 0);
  }
  void add_numRotationKeys(uint32_t numRotationKeys) {
    fbb_.AddElement<uint32_t>(RChannelMetaData::VT_NUMROTATIONKEYS, numRotationKeys, 0);
  }
  explicit RChannelMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RChannelMetaDataBuilder &operator=(const RChannelMetaDataBuilder &);
  flatbuffers::Offset<RChannelMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RChannelMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<RChannelMetaData> CreateRChannelMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t numPositionKeys = 0,
    uint32_t numScaleKeys = 0,
    uint32_t numRotationKeys = 0) {
  RChannelMetaDataBuilder builder_(_fbb);
  builder_.add_numRotationKeys(numRotationKeys);
  builder_.add_numScaleKeys(numScaleKeys);
  builder_.add_numPositionKeys(numPositionKeys);
  return builder_.Finish();
}

struct RAnimationMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RAnimationMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIMATIONNAME = 4,
    VT_DURATIONINTICKS = 6,
    VT_TICKSPERSECONDS = 8,
    VT_CHANNELSMETADATA = 10,
    VT_ORIGINALPATH = 12
  };
  uint64_t animationName() const {
    return GetField<uint64_t>(VT_ANIMATIONNAME, 0);
  }
  bool mutate_animationName(uint64_t _animationName) {
    return SetField<uint64_t>(VT_ANIMATIONNAME, _animationName, 0);
  }
  double durationInTicks() const {
    return GetField<double>(VT_DURATIONINTICKS, 0.0);
  }
  bool mutate_durationInTicks(double _durationInTicks) {
    return SetField<double>(VT_DURATIONINTICKS, _durationInTicks, 0.0);
  }
  double ticksPerSeconds() const {
    return GetField<double>(VT_TICKSPERSECONDS, 0.0);
  }
  bool mutate_ticksPerSeconds(double _ticksPerSeconds) {
    return SetField<double>(VT_TICKSPERSECONDS, _ticksPerSeconds, 0.0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>> *channelsMetaData() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>> *>(VT_CHANNELSMETADATA);
  }
  flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>> *mutable_channelsMetaData() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>> *>(VT_CHANNELSMETADATA);
  }
  const flatbuffers::String *originalPath() const {
    return GetPointer<const flatbuffers::String *>(VT_ORIGINALPATH);
  }
  flatbuffers::String *mutable_originalPath() {
    return GetPointer<flatbuffers::String *>(VT_ORIGINALPATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ANIMATIONNAME) &&
           VerifyField<double>(verifier, VT_DURATIONINTICKS) &&
           VerifyField<double>(verifier, VT_TICKSPERSECONDS) &&
           VerifyOffset(verifier, VT_CHANNELSMETADATA) &&
           verifier.VerifyVector(channelsMetaData()) &&
           verifier.VerifyVectorOfTables(channelsMetaData()) &&
           VerifyOffset(verifier, VT_ORIGINALPATH) &&
           verifier.VerifyString(originalPath()) &&
           verifier.EndTable();
  }
};

struct RAnimationMetaDataBuilder {
  typedef RAnimationMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_animationName(uint64_t animationName) {
    fbb_.AddElement<uint64_t>(RAnimationMetaData::VT_ANIMATIONNAME, animationName, 0);
  }
  void add_durationInTicks(double durationInTicks) {
    fbb_.AddElement<double>(RAnimationMetaData::VT_DURATIONINTICKS, durationInTicks, 0.0);
  }
  void add_ticksPerSeconds(double ticksPerSeconds) {
    fbb_.AddElement<double>(RAnimationMetaData::VT_TICKSPERSECONDS, ticksPerSeconds, 0.0);
  }
  void add_channelsMetaData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>>> channelsMetaData) {
    fbb_.AddOffset(RAnimationMetaData::VT_CHANNELSMETADATA, channelsMetaData);
  }
  void add_originalPath(flatbuffers::Offset<flatbuffers::String> originalPath) {
    fbb_.AddOffset(RAnimationMetaData::VT_ORIGINALPATH, originalPath);
  }
  explicit RAnimationMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RAnimationMetaDataBuilder &operator=(const RAnimationMetaDataBuilder &);
  flatbuffers::Offset<RAnimationMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RAnimationMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<RAnimationMetaData> CreateRAnimationMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t animationName = 0,
    double durationInTicks = 0.0,
    double ticksPerSeconds = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::RChannelMetaData>>> channelsMetaData = 0,
    flatbuffers::Offset<flatbuffers::String> originalPath = 0) {
  RAnimationMetaDataBuilder builder_(_fbb);
  builder_.add_ticksPerSeconds(ticksPerSeconds);
  builder_.add_durationInTicks(durationInTicks);
  builder_.add_animationName(animationName);
  builder_.add_originalPath(originalPath);
  builder_.add_channelsMetaData(channelsMetaData);
  return builder_.Finish();
}

inline flatbuffers::Offset<RAnimationMetaData> CreateRAnimationMetaDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t animationName = 0,
    double durationInTicks = 0.0,
    double ticksPerSeconds = 0.0,
    const std::vector<flatbuffers::Offset<flat::RChannelMetaData>> *channelsMetaData = nullptr,
    const char *originalPath = nullptr) {
  auto channelsMetaData__ = channelsMetaData ? _fbb.CreateVector<flatbuffers::Offset<flat::RChannelMetaData>>(*channelsMetaData) : 0;
  auto originalPath__ = originalPath ? _fbb.CreateString(originalPath) : 0;
  return flat::CreateRAnimationMetaData(
      _fbb,
      animationName,
      durationInTicks,
      ticksPerSeconds,
      channelsMetaData__,
      originalPath__);
}

inline const flat::RAnimationMetaData *GetRAnimationMetaData(const void *buf) {
  return flatbuffers::GetRoot<flat::RAnimationMetaData>(buf);
}

inline const flat::RAnimationMetaData *GetSizePrefixedRAnimationMetaData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::RAnimationMetaData>(buf);
}

inline RAnimationMetaData *GetMutableRAnimationMetaData(void *buf) {
  return flatbuffers::GetMutableRoot<RAnimationMetaData>(buf);
}

inline const char *RAnimationMetaDataIdentifier() {
  return "rman";
}

inline bool RAnimationMetaDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RAnimationMetaDataIdentifier());
}

inline bool VerifyRAnimationMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::RAnimationMetaData>(RAnimationMetaDataIdentifier());
}

inline bool VerifySizePrefixedRAnimationMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::RAnimationMetaData>(RAnimationMetaDataIdentifier());
}

inline const char *RAnimationMetaDataExtension() {
  return "rman";
}

inline void FinishRAnimationMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::RAnimationMetaData> root) {
  fbb.Finish(root, RAnimationMetaDataIdentifier());
}

inline void FinishSizePrefixedRAnimationMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::RAnimationMetaData> root) {
  fbb.FinishSizePrefixed(root, RAnimationMetaDataIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_RANIMATIONMETADATA_FLAT_H_
