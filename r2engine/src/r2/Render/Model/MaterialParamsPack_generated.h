// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIALPARAMSPACK_FLAT_H_
#define FLATBUFFERS_GENERATED_MATERIALPARAMSPACK_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "MaterialParams_generated.h"

namespace flat {

struct MaterialParamsPack;
struct MaterialParamsPackBuilder;

struct MaterialParamsPack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialParamsPackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PACK = 6
  };
  uint64_t name() const {
    return GetField<uint64_t>(VT_NAME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::MaterialParams>> *pack() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::MaterialParams>> *>(VT_PACK);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NAME) &&
           VerifyOffset(verifier, VT_PACK) &&
           verifier.VerifyVector(pack()) &&
           verifier.VerifyVectorOfTables(pack()) &&
           verifier.EndTable();
  }
};

struct MaterialParamsPackBuilder {
  typedef MaterialParamsPack Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(uint64_t name) {
    fbb_.AddElement<uint64_t>(MaterialParamsPack::VT_NAME, name, 0);
  }
  void add_pack(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MaterialParams>>> pack) {
    fbb_.AddOffset(MaterialParamsPack::VT_PACK, pack);
  }
  explicit MaterialParamsPackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialParamsPackBuilder &operator=(const MaterialParamsPackBuilder &);
  flatbuffers::Offset<MaterialParamsPack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialParamsPack>(end);
    return o;
  }
};

inline flatbuffers::Offset<MaterialParamsPack> CreateMaterialParamsPack(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MaterialParams>>> pack = 0) {
  MaterialParamsPackBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_pack(pack);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialParamsPack> CreateMaterialParamsPackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    const std::vector<flatbuffers::Offset<flat::MaterialParams>> *pack = nullptr) {
  auto pack__ = pack ? _fbb.CreateVector<flatbuffers::Offset<flat::MaterialParams>>(*pack) : 0;
  return flat::CreateMaterialParamsPack(
      _fbb,
      name,
      pack__);
}

inline const flat::MaterialParamsPack *GetMaterialParamsPack(const void *buf) {
  return flatbuffers::GetRoot<flat::MaterialParamsPack>(buf);
}

inline const flat::MaterialParamsPack *GetSizePrefixedMaterialParamsPack(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::MaterialParamsPack>(buf);
}

inline const char *MaterialParamsPackIdentifier() {
  return "mppk";
}

inline bool MaterialParamsPackBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MaterialParamsPackIdentifier());
}

inline bool VerifyMaterialParamsPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::MaterialParamsPack>(MaterialParamsPackIdentifier());
}

inline bool VerifySizePrefixedMaterialParamsPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::MaterialParamsPack>(MaterialParamsPackIdentifier());
}

inline const char *MaterialParamsPackExtension() {
  return "mppk";
}

inline void FinishMaterialParamsPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::MaterialParamsPack> root) {
  fbb.Finish(root, MaterialParamsPackIdentifier());
}

inline void FinishSizePrefixedMaterialParamsPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::MaterialParamsPack> root) {
  fbb.FinishSizePrefixed(root, MaterialParamsPackIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_MATERIALPARAMSPACK_FLAT_H_
