// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_FLAT_H_
#define FLATBUFFERS_GENERATED_MODEL_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct MaterialName;
struct MaterialNameBuilder;

struct Model;
struct ModelBuilder;

struct MaterialName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialNameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MATERIALPACKNAME = 6
  };
  uint64_t name() const {
    return GetField<uint64_t>(VT_NAME, 0);
  }
  uint64_t materialPackName() const {
    return GetField<uint64_t>(VT_MATERIALPACKNAME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NAME) &&
           VerifyField<uint64_t>(verifier, VT_MATERIALPACKNAME) &&
           verifier.EndTable();
  }
};

struct MaterialNameBuilder {
  typedef MaterialName Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(uint64_t name) {
    fbb_.AddElement<uint64_t>(MaterialName::VT_NAME, name, 0);
  }
  void add_materialPackName(uint64_t materialPackName) {
    fbb_.AddElement<uint64_t>(MaterialName::VT_MATERIALPACKNAME, materialPackName, 0);
  }
  explicit MaterialNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialNameBuilder &operator=(const MaterialNameBuilder &);
  flatbuffers::Offset<MaterialName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialName>(end);
    return o;
  }
};

inline flatbuffers::Offset<MaterialName> CreateMaterialName(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    uint64_t materialPackName = 0) {
  MaterialNameBuilder builder_(_fbb);
  builder_.add_materialPackName(materialPackName);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Model FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MESHNAMES = 6,
    VT_MATERIALS = 8
  };
  uint64_t name() const {
    return GetField<uint64_t>(VT_NAME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *meshNames() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MESHNAMES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::MaterialName>> *materials() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::MaterialName>> *>(VT_MATERIALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NAME) &&
           VerifyOffset(verifier, VT_MESHNAMES) &&
           verifier.VerifyVector(meshNames()) &&
           verifier.VerifyVectorOfStrings(meshNames()) &&
           VerifyOffset(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(materials()) &&
           verifier.VerifyVectorOfTables(materials()) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  typedef Model Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(uint64_t name) {
    fbb_.AddElement<uint64_t>(Model::VT_NAME, name, 0);
  }
  void add_meshNames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> meshNames) {
    fbb_.AddOffset(Model::VT_MESHNAMES, meshNames);
  }
  void add_materials(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MaterialName>>> materials) {
    fbb_.AddOffset(Model::VT_MATERIALS, materials);
  }
  explicit ModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModelBuilder &operator=(const ModelBuilder &);
  flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Model>(end);
    return o;
  }
};

inline flatbuffers::Offset<Model> CreateModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> meshNames = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::MaterialName>>> materials = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_materials(materials);
  builder_.add_meshNames(meshNames);
  return builder_.Finish();
}

inline flatbuffers::Offset<Model> CreateModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *meshNames = nullptr,
    const std::vector<flatbuffers::Offset<flat::MaterialName>> *materials = nullptr) {
  auto meshNames__ = meshNames ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*meshNames) : 0;
  auto materials__ = materials ? _fbb.CreateVector<flatbuffers::Offset<flat::MaterialName>>(*materials) : 0;
  return flat::CreateModel(
      _fbb,
      name,
      meshNames__,
      materials__);
}

inline const flat::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<flat::Model>(buf);
}

inline const flat::Model *GetSizePrefixedModel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::Model>(buf);
}

inline const char *ModelIdentifier() {
  return "modl";
}

inline bool ModelBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ModelIdentifier());
}

inline bool VerifyModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::Model>(ModelIdentifier());
}

inline bool VerifySizePrefixedModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::Model>(ModelIdentifier());
}

inline const char *ModelExtension() {
  return "modl";
}

inline void FinishModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Model> root) {
  fbb.Finish(root, ModelIdentifier());
}

inline void FinishSizePrefixedModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Model> root) {
  fbb.FinishSizePrefixed(root, ModelIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_MODEL_FLAT_H_
