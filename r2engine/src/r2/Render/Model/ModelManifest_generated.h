// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODELMANIFEST_FLAT_H_
#define FLATBUFFERS_GENERATED_MODELMANIFEST_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "AssetName_generated.h"
#include "AssetRef_generated.h"

namespace flat {

struct ModelsManifest;
struct ModelsManifestBuilder;

struct ModelsManifest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ModelsManifestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_ASSETNAME = 6,
    VT_MESHES = 8,
    VT_MODELS = 10
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *>(VT_MESHES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *models() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *>(VT_MODELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_MESHES) &&
           verifier.VerifyVector(meshes()) &&
           verifier.VerifyVectorOfTables(meshes()) &&
           VerifyOffset(verifier, VT_MODELS) &&
           verifier.VerifyVector(models()) &&
           verifier.VerifyVectorOfTables(models()) &&
           verifier.EndTable();
  }
};

struct ModelsManifestBuilder {
  typedef ModelsManifest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(ModelsManifest::VT_VERSION, version, 0);
  }
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(ModelsManifest::VT_ASSETNAME, assetName);
  }
  void add_meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> meshes) {
    fbb_.AddOffset(ModelsManifest::VT_MESHES, meshes);
  }
  void add_models(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> models) {
    fbb_.AddOffset(ModelsManifest::VT_MODELS, models);
  }
  explicit ModelsManifestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModelsManifestBuilder &operator=(const ModelsManifestBuilder &);
  flatbuffers::Offset<ModelsManifest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ModelsManifest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ModelsManifest> CreateModelsManifest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> meshes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> models = 0) {
  ModelsManifestBuilder builder_(_fbb);
  builder_.add_models(models);
  builder_.add_meshes(meshes);
  builder_.add_assetName(assetName);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<ModelsManifest> CreateModelsManifestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::AssetRef>> *meshes = nullptr,
    const std::vector<flatbuffers::Offset<flat::AssetRef>> *models = nullptr) {
  auto meshes__ = meshes ? _fbb.CreateVector<flatbuffers::Offset<flat::AssetRef>>(*meshes) : 0;
  auto models__ = models ? _fbb.CreateVector<flatbuffers::Offset<flat::AssetRef>>(*models) : 0;
  return flat::CreateModelsManifest(
      _fbb,
      version,
      assetName,
      meshes__,
      models__);
}

inline const flat::ModelsManifest *GetModelsManifest(const void *buf) {
  return flatbuffers::GetRoot<flat::ModelsManifest>(buf);
}

inline const flat::ModelsManifest *GetSizePrefixedModelsManifest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::ModelsManifest>(buf);
}

inline const char *ModelsManifestIdentifier() {
  return "mdlm";
}

inline bool ModelsManifestBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ModelsManifestIdentifier());
}

inline bool VerifyModelsManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::ModelsManifest>(ModelsManifestIdentifier());
}

inline bool VerifySizePrefixedModelsManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::ModelsManifest>(ModelsManifestIdentifier());
}

inline const char *ModelsManifestExtension() {
  return "mdlm";
}

inline void FinishModelsManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ModelsManifest> root) {
  fbb.Finish(root, ModelsManifestIdentifier());
}

inline void FinishSizePrefixedModelsManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ModelsManifest> root) {
  fbb.FinishSizePrefixed(root, ModelsManifestIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_MODELMANIFEST_FLAT_H_
