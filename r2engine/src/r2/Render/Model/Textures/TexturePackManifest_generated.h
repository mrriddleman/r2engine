// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTUREPACKMANIFEST_FLAT_H_
#define FLATBUFFERS_GENERATED_TEXTUREPACKMANIFEST_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "AssetName_generated.h"
#include "AssetRef_generated.h"
#include "TextureMetaData_generated.h"
#include "TexturePackMetaData_generated.h"

namespace flat {

struct TexturePack;
struct TexturePackBuilder;

struct FormatMetaData;
struct FormatMetaDataBuilder;

struct TexturePacksManifest;
struct TexturePacksManifestBuilder;

struct TexturePack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TexturePackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASSETNAME = 4,
    VT_TEXTURES = 6,
    VT_PACKSIZE = 8,
    VT_TOTALNUMBEROFTEXTURES = 10,
    VT_METADATA = 12
  };
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *>(VT_TEXTURES);
  }
  uint64_t packSize() const {
    return GetField<uint64_t>(VT_PACKSIZE, 0);
  }
  uint64_t totalNumberOfTextures() const {
    return GetField<uint64_t>(VT_TOTALNUMBEROFTEXTURES, 0);
  }
  const flat::TexturePackMetaData *metaData() const {
    return GetPointer<const flat::TexturePackMetaData *>(VT_METADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyField<uint64_t>(verifier, VT_PACKSIZE) &&
           VerifyField<uint64_t>(verifier, VT_TOTALNUMBEROFTEXTURES) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyTable(metaData()) &&
           verifier.EndTable();
  }
};

struct TexturePackBuilder {
  typedef TexturePack Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(TexturePack::VT_ASSETNAME, assetName);
  }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> textures) {
    fbb_.AddOffset(TexturePack::VT_TEXTURES, textures);
  }
  void add_packSize(uint64_t packSize) {
    fbb_.AddElement<uint64_t>(TexturePack::VT_PACKSIZE, packSize, 0);
  }
  void add_totalNumberOfTextures(uint64_t totalNumberOfTextures) {
    fbb_.AddElement<uint64_t>(TexturePack::VT_TOTALNUMBEROFTEXTURES, totalNumberOfTextures, 0);
  }
  void add_metaData(flatbuffers::Offset<flat::TexturePackMetaData> metaData) {
    fbb_.AddOffset(TexturePack::VT_METADATA, metaData);
  }
  explicit TexturePackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TexturePackBuilder &operator=(const TexturePackBuilder &);
  flatbuffers::Offset<TexturePack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TexturePack>(end);
    return o;
  }
};

inline flatbuffers::Offset<TexturePack> CreateTexturePack(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> textures = 0,
    uint64_t packSize = 0,
    uint64_t totalNumberOfTextures = 0,
    flatbuffers::Offset<flat::TexturePackMetaData> metaData = 0) {
  TexturePackBuilder builder_(_fbb);
  builder_.add_totalNumberOfTextures(totalNumberOfTextures);
  builder_.add_packSize(packSize);
  builder_.add_metaData(metaData);
  builder_.add_textures(textures);
  builder_.add_assetName(assetName);
  return builder_.Finish();
}

inline flatbuffers::Offset<TexturePack> CreateTexturePackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::AssetRef>> *textures = nullptr,
    uint64_t packSize = 0,
    uint64_t totalNumberOfTextures = 0,
    flatbuffers::Offset<flat::TexturePackMetaData> metaData = 0) {
  auto textures__ = textures ? _fbb.CreateVector<flatbuffers::Offset<flat::AssetRef>>(*textures) : 0;
  return flat::CreateTexturePack(
      _fbb,
      assetName,
      textures__,
      packSize,
      totalNumberOfTextures,
      metaData);
}

struct FormatMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FormatMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT = 4,
    VT_MAXWIDTH = 6,
    VT_MAXHEIGHT = 8,
    VT_NUMTEXTURES = 10,
    VT_MAXMIPS = 12,
    VT_ISCUBEMAP = 14,
    VT_ISANISOTROPIC = 16
  };
  flat::TextureFormat format() const {
    return static_cast<flat::TextureFormat>(GetField<uint16_t>(VT_FORMAT, 0));
  }
  uint32_t maxWidth() const {
    return GetField<uint32_t>(VT_MAXWIDTH, 0);
  }
  uint32_t maxHeight() const {
    return GetField<uint32_t>(VT_MAXHEIGHT, 0);
  }
  uint32_t numTextures() const {
    return GetField<uint32_t>(VT_NUMTEXTURES, 0);
  }
  uint32_t maxMips() const {
    return GetField<uint32_t>(VT_MAXMIPS, 0);
  }
  bool isCubemap() const {
    return GetField<uint8_t>(VT_ISCUBEMAP, 0) != 0;
  }
  bool isAnisotropic() const {
    return GetField<uint8_t>(VT_ISANISOTROPIC, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_FORMAT) &&
           VerifyField<uint32_t>(verifier, VT_MAXWIDTH) &&
           VerifyField<uint32_t>(verifier, VT_MAXHEIGHT) &&
           VerifyField<uint32_t>(verifier, VT_NUMTEXTURES) &&
           VerifyField<uint32_t>(verifier, VT_MAXMIPS) &&
           VerifyField<uint8_t>(verifier, VT_ISCUBEMAP) &&
           VerifyField<uint8_t>(verifier, VT_ISANISOTROPIC) &&
           verifier.EndTable();
  }
};

struct FormatMetaDataBuilder {
  typedef FormatMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_format(flat::TextureFormat format) {
    fbb_.AddElement<uint16_t>(FormatMetaData::VT_FORMAT, static_cast<uint16_t>(format), 0);
  }
  void add_maxWidth(uint32_t maxWidth) {
    fbb_.AddElement<uint32_t>(FormatMetaData::VT_MAXWIDTH, maxWidth, 0);
  }
  void add_maxHeight(uint32_t maxHeight) {
    fbb_.AddElement<uint32_t>(FormatMetaData::VT_MAXHEIGHT, maxHeight, 0);
  }
  void add_numTextures(uint32_t numTextures) {
    fbb_.AddElement<uint32_t>(FormatMetaData::VT_NUMTEXTURES, numTextures, 0);
  }
  void add_maxMips(uint32_t maxMips) {
    fbb_.AddElement<uint32_t>(FormatMetaData::VT_MAXMIPS, maxMips, 0);
  }
  void add_isCubemap(bool isCubemap) {
    fbb_.AddElement<uint8_t>(FormatMetaData::VT_ISCUBEMAP, static_cast<uint8_t>(isCubemap), 0);
  }
  void add_isAnisotropic(bool isAnisotropic) {
    fbb_.AddElement<uint8_t>(FormatMetaData::VT_ISANISOTROPIC, static_cast<uint8_t>(isAnisotropic), 0);
  }
  explicit FormatMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FormatMetaDataBuilder &operator=(const FormatMetaDataBuilder &);
  flatbuffers::Offset<FormatMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FormatMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FormatMetaData> CreateFormatMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flat::TextureFormat format = flat::TextureFormat_UNKNOWN,
    uint32_t maxWidth = 0,
    uint32_t maxHeight = 0,
    uint32_t numTextures = 0,
    uint32_t maxMips = 0,
    bool isCubemap = false,
    bool isAnisotropic = false) {
  FormatMetaDataBuilder builder_(_fbb);
  builder_.add_maxMips(maxMips);
  builder_.add_numTextures(numTextures);
  builder_.add_maxHeight(maxHeight);
  builder_.add_maxWidth(maxWidth);
  builder_.add_format(format);
  builder_.add_isAnisotropic(isAnisotropic);
  builder_.add_isCubemap(isCubemap);
  return builder_.Finish();
}

struct TexturePacksManifest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TexturePacksManifestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_ASSETNAME = 6,
    VT_TEXTUREPACKS = 8,
    VT_TOTALNUMBEROFTEXTURES = 10,
    VT_TOTALTEXTURESIZE = 12,
    VT_MAXTEXTURESINAPACK = 14,
    VT_FORMATMETADATA = 16
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::TexturePack>> *texturePacks() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::TexturePack>> *>(VT_TEXTUREPACKS);
  }
  uint64_t totalNumberOfTextures() const {
    return GetField<uint64_t>(VT_TOTALNUMBEROFTEXTURES, 0);
  }
  uint64_t totalTextureSize() const {
    return GetField<uint64_t>(VT_TOTALTEXTURESIZE, 0);
  }
  uint64_t maxTexturesInAPack() const {
    return GetField<uint64_t>(VT_MAXTEXTURESINAPACK, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::FormatMetaData>> *formatMetaData() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::FormatMetaData>> *>(VT_FORMATMETADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_TEXTUREPACKS) &&
           verifier.VerifyVector(texturePacks()) &&
           verifier.VerifyVectorOfTables(texturePacks()) &&
           VerifyField<uint64_t>(verifier, VT_TOTALNUMBEROFTEXTURES) &&
           VerifyField<uint64_t>(verifier, VT_TOTALTEXTURESIZE) &&
           VerifyField<uint64_t>(verifier, VT_MAXTEXTURESINAPACK) &&
           VerifyOffset(verifier, VT_FORMATMETADATA) &&
           verifier.VerifyVector(formatMetaData()) &&
           verifier.VerifyVectorOfTables(formatMetaData()) &&
           verifier.EndTable();
  }
};

struct TexturePacksManifestBuilder {
  typedef TexturePacksManifest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(TexturePacksManifest::VT_VERSION, version, 0);
  }
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(TexturePacksManifest::VT_ASSETNAME, assetName);
  }
  void add_texturePacks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::TexturePack>>> texturePacks) {
    fbb_.AddOffset(TexturePacksManifest::VT_TEXTUREPACKS, texturePacks);
  }
  void add_totalNumberOfTextures(uint64_t totalNumberOfTextures) {
    fbb_.AddElement<uint64_t>(TexturePacksManifest::VT_TOTALNUMBEROFTEXTURES, totalNumberOfTextures, 0);
  }
  void add_totalTextureSize(uint64_t totalTextureSize) {
    fbb_.AddElement<uint64_t>(TexturePacksManifest::VT_TOTALTEXTURESIZE, totalTextureSize, 0);
  }
  void add_maxTexturesInAPack(uint64_t maxTexturesInAPack) {
    fbb_.AddElement<uint64_t>(TexturePacksManifest::VT_MAXTEXTURESINAPACK, maxTexturesInAPack, 0);
  }
  void add_formatMetaData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::FormatMetaData>>> formatMetaData) {
    fbb_.AddOffset(TexturePacksManifest::VT_FORMATMETADATA, formatMetaData);
  }
  explicit TexturePacksManifestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TexturePacksManifestBuilder &operator=(const TexturePacksManifestBuilder &);
  flatbuffers::Offset<TexturePacksManifest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TexturePacksManifest>(end);
    return o;
  }
};

inline flatbuffers::Offset<TexturePacksManifest> CreateTexturePacksManifest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::TexturePack>>> texturePacks = 0,
    uint64_t totalNumberOfTextures = 0,
    uint64_t totalTextureSize = 0,
    uint64_t maxTexturesInAPack = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::FormatMetaData>>> formatMetaData = 0) {
  TexturePacksManifestBuilder builder_(_fbb);
  builder_.add_maxTexturesInAPack(maxTexturesInAPack);
  builder_.add_totalTextureSize(totalTextureSize);
  builder_.add_totalNumberOfTextures(totalNumberOfTextures);
  builder_.add_formatMetaData(formatMetaData);
  builder_.add_texturePacks(texturePacks);
  builder_.add_assetName(assetName);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<TexturePacksManifest> CreateTexturePacksManifestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::TexturePack>> *texturePacks = nullptr,
    uint64_t totalNumberOfTextures = 0,
    uint64_t totalTextureSize = 0,
    uint64_t maxTexturesInAPack = 0,
    const std::vector<flatbuffers::Offset<flat::FormatMetaData>> *formatMetaData = nullptr) {
  auto texturePacks__ = texturePacks ? _fbb.CreateVector<flatbuffers::Offset<flat::TexturePack>>(*texturePacks) : 0;
  auto formatMetaData__ = formatMetaData ? _fbb.CreateVector<flatbuffers::Offset<flat::FormatMetaData>>(*formatMetaData) : 0;
  return flat::CreateTexturePacksManifest(
      _fbb,
      version,
      assetName,
      texturePacks__,
      totalNumberOfTextures,
      totalTextureSize,
      maxTexturesInAPack,
      formatMetaData__);
}

inline const flat::TexturePacksManifest *GetTexturePacksManifest(const void *buf) {
  return flatbuffers::GetRoot<flat::TexturePacksManifest>(buf);
}

inline const flat::TexturePacksManifest *GetSizePrefixedTexturePacksManifest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::TexturePacksManifest>(buf);
}

inline const char *TexturePacksManifestIdentifier() {
  return "tman";
}

inline bool TexturePacksManifestBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TexturePacksManifestIdentifier());
}

inline bool VerifyTexturePacksManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::TexturePacksManifest>(TexturePacksManifestIdentifier());
}

inline bool VerifySizePrefixedTexturePacksManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::TexturePacksManifest>(TexturePacksManifestIdentifier());
}

inline const char *TexturePacksManifestExtension() {
  return "tman";
}

inline void FinishTexturePacksManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TexturePacksManifest> root) {
  fbb.Finish(root, TexturePacksManifestIdentifier());
}

inline void FinishSizePrefixedTexturePacksManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TexturePacksManifest> root) {
  fbb.FinishSizePrefixed(root, TexturePacksManifestIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_TEXTUREPACKMANIFEST_FLAT_H_
