// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTUREPACKMETADATA_FLAT_H_
#define FLATBUFFERS_GENERATED_TEXTUREPACKMETADATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct CubemapSideEntry;
struct CubemapSideEntryBuilder;

struct CubemapMetaData;
struct CubemapMetaDataBuilder;

struct TexturePackMetaData;
struct TexturePackMetaDataBuilder;

enum TextureType {
  TextureType_TEXTURE = 0,
  TextureType_CUBEMAP = 1,
  TextureType_MIN = TextureType_TEXTURE,
  TextureType_MAX = TextureType_CUBEMAP
};

inline const TextureType (&EnumValuesTextureType())[2] {
  static const TextureType values[] = {
    TextureType_TEXTURE,
    TextureType_CUBEMAP
  };
  return values;
}

inline const char * const *EnumNamesTextureType() {
  static const char * const names[3] = {
    "TEXTURE",
    "CUBEMAP",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextureType(TextureType e) {
  if (flatbuffers::IsOutRange(e, TextureType_TEXTURE, TextureType_CUBEMAP)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTextureType()[index];
}

enum CubemapSide {
  CubemapSide_RIGHT = 0,
  CubemapSide_LEFT = 1,
  CubemapSide_TOP = 2,
  CubemapSide_BOTTOM = 3,
  CubemapSide_FRONT = 4,
  CubemapSide_BACK = 5,
  CubemapSide_NUM_SIDES = 6,
  CubemapSide_MIN = CubemapSide_RIGHT,
  CubemapSide_MAX = CubemapSide_NUM_SIDES
};

inline const CubemapSide (&EnumValuesCubemapSide())[7] {
  static const CubemapSide values[] = {
    CubemapSide_RIGHT,
    CubemapSide_LEFT,
    CubemapSide_TOP,
    CubemapSide_BOTTOM,
    CubemapSide_FRONT,
    CubemapSide_BACK,
    CubemapSide_NUM_SIDES
  };
  return values;
}

inline const char * const *EnumNamesCubemapSide() {
  static const char * const names[8] = {
    "RIGHT",
    "LEFT",
    "TOP",
    "BOTTOM",
    "FRONT",
    "BACK",
    "NUM_SIDES",
    nullptr
  };
  return names;
}

inline const char *EnumNameCubemapSide(CubemapSide e) {
  if (flatbuffers::IsOutRange(e, CubemapSide_RIGHT, CubemapSide_NUM_SIDES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCubemapSide()[index];
}

struct CubemapSideEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CubemapSideEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXTURENAME = 4,
    VT_SIDE = 6
  };
  const flatbuffers::String *textureName() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXTURENAME);
  }
  flat::CubemapSide side() const {
    return static_cast<flat::CubemapSide>(GetField<int8_t>(VT_SIDE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTURENAME) &&
           verifier.VerifyString(textureName()) &&
           VerifyField<int8_t>(verifier, VT_SIDE) &&
           verifier.EndTable();
  }
};

struct CubemapSideEntryBuilder {
  typedef CubemapSideEntry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textureName(flatbuffers::Offset<flatbuffers::String> textureName) {
    fbb_.AddOffset(CubemapSideEntry::VT_TEXTURENAME, textureName);
  }
  void add_side(flat::CubemapSide side) {
    fbb_.AddElement<int8_t>(CubemapSideEntry::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  explicit CubemapSideEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CubemapSideEntryBuilder &operator=(const CubemapSideEntryBuilder &);
  flatbuffers::Offset<CubemapSideEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CubemapSideEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<CubemapSideEntry> CreateCubemapSideEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> textureName = 0,
    flat::CubemapSide side = flat::CubemapSide_RIGHT) {
  CubemapSideEntryBuilder builder_(_fbb);
  builder_.add_textureName(textureName);
  builder_.add_side(side);
  return builder_.Finish();
}

inline flatbuffers::Offset<CubemapSideEntry> CreateCubemapSideEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *textureName = nullptr,
    flat::CubemapSide side = flat::CubemapSide_RIGHT) {
  auto textureName__ = textureName ? _fbb.CreateString(textureName) : 0;
  return flat::CreateCubemapSideEntry(
      _fbb,
      textureName__,
      side);
}

struct CubemapMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CubemapMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIDES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::CubemapSideEntry>> *sides() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::CubemapSideEntry>> *>(VT_SIDES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SIDES) &&
           verifier.VerifyVector(sides()) &&
           verifier.VerifyVectorOfTables(sides()) &&
           verifier.EndTable();
  }
};

struct CubemapMetaDataBuilder {
  typedef CubemapMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sides(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::CubemapSideEntry>>> sides) {
    fbb_.AddOffset(CubemapMetaData::VT_SIDES, sides);
  }
  explicit CubemapMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CubemapMetaDataBuilder &operator=(const CubemapMetaDataBuilder &);
  flatbuffers::Offset<CubemapMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CubemapMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<CubemapMetaData> CreateCubemapMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::CubemapSideEntry>>> sides = 0) {
  CubemapMetaDataBuilder builder_(_fbb);
  builder_.add_sides(sides);
  return builder_.Finish();
}

inline flatbuffers::Offset<CubemapMetaData> CreateCubemapMetaDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::CubemapSideEntry>> *sides = nullptr) {
  auto sides__ = sides ? _fbb.CreateVector<flatbuffers::Offset<flat::CubemapSideEntry>>(*sides) : 0;
  return flat::CreateCubemapMetaData(
      _fbb,
      sides__);
}

struct TexturePackMetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TexturePackMetaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CUBEMAPMETADATA = 6
  };
  flat::TextureType type() const {
    return static_cast<flat::TextureType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flat::CubemapMetaData *cubemapMetaData() const {
    return GetPointer<const flat::CubemapMetaData *>(VT_CUBEMAPMETADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_CUBEMAPMETADATA) &&
           verifier.VerifyTable(cubemapMetaData()) &&
           verifier.EndTable();
  }
};

struct TexturePackMetaDataBuilder {
  typedef TexturePackMetaData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flat::TextureType type) {
    fbb_.AddElement<int8_t>(TexturePackMetaData::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_cubemapMetaData(flatbuffers::Offset<flat::CubemapMetaData> cubemapMetaData) {
    fbb_.AddOffset(TexturePackMetaData::VT_CUBEMAPMETADATA, cubemapMetaData);
  }
  explicit TexturePackMetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TexturePackMetaDataBuilder &operator=(const TexturePackMetaDataBuilder &);
  flatbuffers::Offset<TexturePackMetaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TexturePackMetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TexturePackMetaData> CreateTexturePackMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flat::TextureType type = flat::TextureType_TEXTURE,
    flatbuffers::Offset<flat::CubemapMetaData> cubemapMetaData = 0) {
  TexturePackMetaDataBuilder builder_(_fbb);
  builder_.add_cubemapMetaData(cubemapMetaData);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const flat::TexturePackMetaData *GetTexturePackMetaData(const void *buf) {
  return flatbuffers::GetRoot<flat::TexturePackMetaData>(buf);
}

inline const flat::TexturePackMetaData *GetSizePrefixedTexturePackMetaData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::TexturePackMetaData>(buf);
}

inline const char *TexturePackMetaDataIdentifier() {
  return "tmet";
}

inline bool TexturePackMetaDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TexturePackMetaDataIdentifier());
}

inline bool VerifyTexturePackMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::TexturePackMetaData>(TexturePackMetaDataIdentifier());
}

inline bool VerifySizePrefixedTexturePackMetaDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::TexturePackMetaData>(TexturePackMetaDataIdentifier());
}

inline const char *TexturePackMetaDataExtension() {
  return "tmet";
}

inline void FinishTexturePackMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TexturePackMetaData> root) {
  fbb.Finish(root, TexturePackMetaDataIdentifier());
}

inline void FinishSizePrefixedTexturePackMetaDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TexturePackMetaData> root) {
  fbb.FinishSizePrefixed(root, TexturePackMetaDataIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_TEXTUREPACKMETADATA_FLAT_H_
