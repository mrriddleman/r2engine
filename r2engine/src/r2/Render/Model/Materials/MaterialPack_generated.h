// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIALPACK_FLAT_H_
#define FLATBUFFERS_GENERATED_MATERIALPACK_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "AssetName_generated.h"
#include "Material_generated.h"
#include "ShaderEffect_generated.h"
#include "ShaderEffectPasses_generated.h"
#include "ShaderParams_generated.h"

namespace flat {

struct MaterialPack;
struct MaterialPackBuilder;

struct MaterialPack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialPackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_ASSETNAME = 6,
    VT_PACK = 8
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::Material>> *pack() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::Material>> *>(VT_PACK);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_PACK) &&
           verifier.VerifyVector(pack()) &&
           verifier.VerifyVectorOfTables(pack()) &&
           verifier.EndTable();
  }
};

struct MaterialPackBuilder {
  typedef MaterialPack Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(MaterialPack::VT_VERSION, version, 0);
  }
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(MaterialPack::VT_ASSETNAME, assetName);
  }
  void add_pack(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Material>>> pack) {
    fbb_.AddOffset(MaterialPack::VT_PACK, pack);
  }
  explicit MaterialPackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialPackBuilder &operator=(const MaterialPackBuilder &);
  flatbuffers::Offset<MaterialPack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialPack>(end);
    return o;
  }
};

inline flatbuffers::Offset<MaterialPack> CreateMaterialPack(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Material>>> pack = 0) {
  MaterialPackBuilder builder_(_fbb);
  builder_.add_pack(pack);
  builder_.add_assetName(assetName);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialPack> CreateMaterialPackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::Material>> *pack = nullptr) {
  auto pack__ = pack ? _fbb.CreateVector<flatbuffers::Offset<flat::Material>>(*pack) : 0;
  return flat::CreateMaterialPack(
      _fbb,
      version,
      assetName,
      pack__);
}

inline const flat::MaterialPack *GetMaterialPack(const void *buf) {
  return flatbuffers::GetRoot<flat::MaterialPack>(buf);
}

inline const flat::MaterialPack *GetSizePrefixedMaterialPack(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::MaterialPack>(buf);
}

inline const char *MaterialPackIdentifier() {
  return "mpak";
}

inline bool MaterialPackBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MaterialPackIdentifier());
}

inline bool VerifyMaterialPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::MaterialPack>(MaterialPackIdentifier());
}

inline bool VerifySizePrefixedMaterialPackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::MaterialPack>(MaterialPackIdentifier());
}

inline const char *MaterialPackExtension() {
  return "mpak";
}

inline void FinishMaterialPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::MaterialPack> root) {
  fbb.Finish(root, MaterialPackIdentifier());
}

inline void FinishSizePrefixedMaterialPackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::MaterialPack> root) {
  fbb.FinishSizePrefixed(root, MaterialPackIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_MATERIALPACK_FLAT_H_
