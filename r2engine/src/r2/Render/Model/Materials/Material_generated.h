// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_FLAT_H_
#define FLATBUFFERS_GENERATED_MATERIAL_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct Color;

struct Material;
struct MaterialBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Color FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;

 public:
  Color() {
    memset(static_cast<void *>(this), 0, sizeof(Color));
  }
  Color(float _r, float _g, float _b, float _a)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)),
        a_(flatbuffers::EndianScalar(_a)) {
  }
  float r() const {
    return flatbuffers::EndianScalar(r_);
  }
  float g() const {
    return flatbuffers::EndianScalar(g_);
  }
  float b() const {
    return flatbuffers::EndianScalar(b_);
  }
  float a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 16);

struct Material FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SHADER = 6,
    VT_TEXTUREPACKNAME = 8,
    VT_DIFFUSETEXTURE = 10,
    VT_SPECULARTEXTURE = 12,
    VT_NORMALMAPTEXTURE = 14,
    VT_EMISSIONTEXTURE = 16,
    VT_METALLICTEXTURE = 18,
    VT_ROUGHNESSTEXTURE = 20,
    VT_AOTEXTURE = 22,
    VT_HEIGHTTEXTURE = 24,
    VT_ANISOTROPYTEXTURE = 26,
    VT_BASECOLOR = 28,
    VT_SPECULAR = 30,
    VT_ROUGHNESS = 32,
    VT_METALLIC = 34,
    VT_REFLECTANCE = 36,
    VT_AMBIENTOCCLUSION = 38,
    VT_CLEARCOAT = 40,
    VT_CLEARCOATROUGHNESS = 42,
    VT_ANISOTROPY = 44,
    VT_HEIGHTSCALE = 46
  };
  uint64_t name() const {
    return GetField<uint64_t>(VT_NAME, 0);
  }
  uint64_t shader() const {
    return GetField<uint64_t>(VT_SHADER, 0);
  }
  uint64_t texturePackName() const {
    return GetField<uint64_t>(VT_TEXTUREPACKNAME, 0);
  }
  uint64_t diffuseTexture() const {
    return GetField<uint64_t>(VT_DIFFUSETEXTURE, 0);
  }
  uint64_t specularTexture() const {
    return GetField<uint64_t>(VT_SPECULARTEXTURE, 0);
  }
  uint64_t normalMapTexture() const {
    return GetField<uint64_t>(VT_NORMALMAPTEXTURE, 0);
  }
  uint64_t emissionTexture() const {
    return GetField<uint64_t>(VT_EMISSIONTEXTURE, 0);
  }
  uint64_t metallicTexture() const {
    return GetField<uint64_t>(VT_METALLICTEXTURE, 0);
  }
  uint64_t roughnessTexture() const {
    return GetField<uint64_t>(VT_ROUGHNESSTEXTURE, 0);
  }
  uint64_t aoTexture() const {
    return GetField<uint64_t>(VT_AOTEXTURE, 0);
  }
  uint64_t heightTexture() const {
    return GetField<uint64_t>(VT_HEIGHTTEXTURE, 0);
  }
  uint64_t anisotropyTexture() const {
    return GetField<uint64_t>(VT_ANISOTROPYTEXTURE, 0);
  }
  const flat::Color *baseColor() const {
    return GetStruct<const flat::Color *>(VT_BASECOLOR);
  }
  float specular() const {
    return GetField<float>(VT_SPECULAR, 0.0f);
  }
  float roughness() const {
    return GetField<float>(VT_ROUGHNESS, 0.0f);
  }
  float metallic() const {
    return GetField<float>(VT_METALLIC, 0.0f);
  }
  float reflectance() const {
    return GetField<float>(VT_REFLECTANCE, 0.0f);
  }
  float ambientOcclusion() const {
    return GetField<float>(VT_AMBIENTOCCLUSION, 0.0f);
  }
  float clearCoat() const {
    return GetField<float>(VT_CLEARCOAT, 0.0f);
  }
  float clearCoatRoughness() const {
    return GetField<float>(VT_CLEARCOATROUGHNESS, 0.0f);
  }
  float anisotropy() const {
    return GetField<float>(VT_ANISOTROPY, 0.0f);
  }
  float heightScale() const {
    return GetField<float>(VT_HEIGHTSCALE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NAME) &&
           VerifyField<uint64_t>(verifier, VT_SHADER) &&
           VerifyField<uint64_t>(verifier, VT_TEXTUREPACKNAME) &&
           VerifyField<uint64_t>(verifier, VT_DIFFUSETEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_SPECULARTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_NORMALMAPTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_EMISSIONTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_METALLICTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_ROUGHNESSTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_AOTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_HEIGHTTEXTURE) &&
           VerifyField<uint64_t>(verifier, VT_ANISOTROPYTEXTURE) &&
           VerifyField<flat::Color>(verifier, VT_BASECOLOR) &&
           VerifyField<float>(verifier, VT_SPECULAR) &&
           VerifyField<float>(verifier, VT_ROUGHNESS) &&
           VerifyField<float>(verifier, VT_METALLIC) &&
           VerifyField<float>(verifier, VT_REFLECTANCE) &&
           VerifyField<float>(verifier, VT_AMBIENTOCCLUSION) &&
           VerifyField<float>(verifier, VT_CLEARCOAT) &&
           VerifyField<float>(verifier, VT_CLEARCOATROUGHNESS) &&
           VerifyField<float>(verifier, VT_ANISOTROPY) &&
           VerifyField<float>(verifier, VT_HEIGHTSCALE) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  typedef Material Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(uint64_t name) {
    fbb_.AddElement<uint64_t>(Material::VT_NAME, name, 0);
  }
  void add_shader(uint64_t shader) {
    fbb_.AddElement<uint64_t>(Material::VT_SHADER, shader, 0);
  }
  void add_texturePackName(uint64_t texturePackName) {
    fbb_.AddElement<uint64_t>(Material::VT_TEXTUREPACKNAME, texturePackName, 0);
  }
  void add_diffuseTexture(uint64_t diffuseTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_DIFFUSETEXTURE, diffuseTexture, 0);
  }
  void add_specularTexture(uint64_t specularTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_SPECULARTEXTURE, specularTexture, 0);
  }
  void add_normalMapTexture(uint64_t normalMapTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_NORMALMAPTEXTURE, normalMapTexture, 0);
  }
  void add_emissionTexture(uint64_t emissionTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_EMISSIONTEXTURE, emissionTexture, 0);
  }
  void add_metallicTexture(uint64_t metallicTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_METALLICTEXTURE, metallicTexture, 0);
  }
  void add_roughnessTexture(uint64_t roughnessTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_ROUGHNESSTEXTURE, roughnessTexture, 0);
  }
  void add_aoTexture(uint64_t aoTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_AOTEXTURE, aoTexture, 0);
  }
  void add_heightTexture(uint64_t heightTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_HEIGHTTEXTURE, heightTexture, 0);
  }
  void add_anisotropyTexture(uint64_t anisotropyTexture) {
    fbb_.AddElement<uint64_t>(Material::VT_ANISOTROPYTEXTURE, anisotropyTexture, 0);
  }
  void add_baseColor(const flat::Color *baseColor) {
    fbb_.AddStruct(Material::VT_BASECOLOR, baseColor);
  }
  void add_specular(float specular) {
    fbb_.AddElement<float>(Material::VT_SPECULAR, specular, 0.0f);
  }
  void add_roughness(float roughness) {
    fbb_.AddElement<float>(Material::VT_ROUGHNESS, roughness, 0.0f);
  }
  void add_metallic(float metallic) {
    fbb_.AddElement<float>(Material::VT_METALLIC, metallic, 0.0f);
  }
  void add_reflectance(float reflectance) {
    fbb_.AddElement<float>(Material::VT_REFLECTANCE, reflectance, 0.0f);
  }
  void add_ambientOcclusion(float ambientOcclusion) {
    fbb_.AddElement<float>(Material::VT_AMBIENTOCCLUSION, ambientOcclusion, 0.0f);
  }
  void add_clearCoat(float clearCoat) {
    fbb_.AddElement<float>(Material::VT_CLEARCOAT, clearCoat, 0.0f);
  }
  void add_clearCoatRoughness(float clearCoatRoughness) {
    fbb_.AddElement<float>(Material::VT_CLEARCOATROUGHNESS, clearCoatRoughness, 0.0f);
  }
  void add_anisotropy(float anisotropy) {
    fbb_.AddElement<float>(Material::VT_ANISOTROPY, anisotropy, 0.0f);
  }
  void add_heightScale(float heightScale) {
    fbb_.AddElement<float>(Material::VT_HEIGHTSCALE, heightScale, 0.0f);
  }
  explicit MaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialBuilder &operator=(const MaterialBuilder &);
  flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline flatbuffers::Offset<Material> CreateMaterial(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t name = 0,
    uint64_t shader = 0,
    uint64_t texturePackName = 0,
    uint64_t diffuseTexture = 0,
    uint64_t specularTexture = 0,
    uint64_t normalMapTexture = 0,
    uint64_t emissionTexture = 0,
    uint64_t metallicTexture = 0,
    uint64_t roughnessTexture = 0,
    uint64_t aoTexture = 0,
    uint64_t heightTexture = 0,
    uint64_t anisotropyTexture = 0,
    const flat::Color *baseColor = 0,
    float specular = 0.0f,
    float roughness = 0.0f,
    float metallic = 0.0f,
    float reflectance = 0.0f,
    float ambientOcclusion = 0.0f,
    float clearCoat = 0.0f,
    float clearCoatRoughness = 0.0f,
    float anisotropy = 0.0f,
    float heightScale = 0.0f) {
  MaterialBuilder builder_(_fbb);
  builder_.add_anisotropyTexture(anisotropyTexture);
  builder_.add_heightTexture(heightTexture);
  builder_.add_aoTexture(aoTexture);
  builder_.add_roughnessTexture(roughnessTexture);
  builder_.add_metallicTexture(metallicTexture);
  builder_.add_emissionTexture(emissionTexture);
  builder_.add_normalMapTexture(normalMapTexture);
  builder_.add_specularTexture(specularTexture);
  builder_.add_diffuseTexture(diffuseTexture);
  builder_.add_texturePackName(texturePackName);
  builder_.add_shader(shader);
  builder_.add_name(name);
  builder_.add_heightScale(heightScale);
  builder_.add_anisotropy(anisotropy);
  builder_.add_clearCoatRoughness(clearCoatRoughness);
  builder_.add_clearCoat(clearCoat);
  builder_.add_ambientOcclusion(ambientOcclusion);
  builder_.add_reflectance(reflectance);
  builder_.add_metallic(metallic);
  builder_.add_roughness(roughness);
  builder_.add_specular(specular);
  builder_.add_baseColor(baseColor);
  return builder_.Finish();
}

inline const flat::Material *GetMaterial(const void *buf) {
  return flatbuffers::GetRoot<flat::Material>(buf);
}

inline const flat::Material *GetSizePrefixedMaterial(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::Material>(buf);
}

inline const char *MaterialIdentifier() {
  return "mmat";
}

inline bool MaterialBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MaterialIdentifier());
}

inline bool VerifyMaterialBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::Material>(MaterialIdentifier());
}

inline bool VerifySizePrefixedMaterialBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::Material>(MaterialIdentifier());
}

inline const char *MaterialExtension() {
  return "mmat";
}

inline void FinishMaterialBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Material> root) {
  fbb.Finish(root, MaterialIdentifier());
}

inline void FinishSizePrefixedMaterialBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Material> root) {
  fbb.FinishSizePrefixed(root, MaterialIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_MATERIAL_FLAT_H_
