// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADEREFFECTPASSES_FLAT_H_
#define FLATBUFFERS_GENERATED_SHADEREFFECTPASSES_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "MaterialParams_generated.h"
#include "ShaderEffect_generated.h"
#include "ShaderParams_generated.h"

namespace flat {

struct ShaderEffectPasses;
struct ShaderEffectPassesBuilder;

enum eMeshPass {
  eMeshPass_FORWARD = 0,
  eMeshPass_TRANSPARENT = 1,
  eMeshPass_DEPTH = 2,
  eMeshPass_SHADOW_DIRECTIONAL = 3,
  eMeshPass_SHADOW_POINT = 4,
  eMeshPass_SHADOW_SPOTLIGHT = 5,
  eMeshPass_NUM_SHADER_EFFECT_PASSES = 6,
  eMeshPass_MIN = eMeshPass_FORWARD,
  eMeshPass_MAX = eMeshPass_NUM_SHADER_EFFECT_PASSES
};

inline const eMeshPass (&EnumValueseMeshPass())[7] {
  static const eMeshPass values[] = {
    eMeshPass_FORWARD,
    eMeshPass_TRANSPARENT,
    eMeshPass_DEPTH,
    eMeshPass_SHADOW_DIRECTIONAL,
    eMeshPass_SHADOW_POINT,
    eMeshPass_SHADOW_SPOTLIGHT,
    eMeshPass_NUM_SHADER_EFFECT_PASSES
  };
  return values;
}

inline const char * const *EnumNameseMeshPass() {
  static const char * const names[8] = {
    "FORWARD",
    "TRANSPARENT",
    "DEPTH",
    "SHADOW_DIRECTIONAL",
    "SHADOW_POINT",
    "SHADOW_SPOTLIGHT",
    "NUM_SHADER_EFFECT_PASSES",
    nullptr
  };
  return names;
}

inline const char *EnumNameeMeshPass(eMeshPass e) {
  if (flatbuffers::IsOutRange(e, eMeshPass_FORWARD, eMeshPass_NUM_SHADER_EFFECT_PASSES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseMeshPass()[index];
}

struct ShaderEffectPasses FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderEffectPassesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHADEREFFECTPASSES = 4,
    VT_DEFAULTSHADERPARAMS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::ShaderEffect>> *shaderEffectPasses() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::ShaderEffect>> *>(VT_SHADEREFFECTPASSES);
  }
  const flat::ShaderParams *defaultShaderParams() const {
    return GetPointer<const flat::ShaderParams *>(VT_DEFAULTSHADERPARAMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHADEREFFECTPASSES) &&
           verifier.VerifyVector(shaderEffectPasses()) &&
           verifier.VerifyVectorOfTables(shaderEffectPasses()) &&
           VerifyOffset(verifier, VT_DEFAULTSHADERPARAMS) &&
           verifier.VerifyTable(defaultShaderParams()) &&
           verifier.EndTable();
  }
};

struct ShaderEffectPassesBuilder {
  typedef ShaderEffectPasses Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shaderEffectPasses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::ShaderEffect>>> shaderEffectPasses) {
    fbb_.AddOffset(ShaderEffectPasses::VT_SHADEREFFECTPASSES, shaderEffectPasses);
  }
  void add_defaultShaderParams(flatbuffers::Offset<flat::ShaderParams> defaultShaderParams) {
    fbb_.AddOffset(ShaderEffectPasses::VT_DEFAULTSHADERPARAMS, defaultShaderParams);
  }
  explicit ShaderEffectPassesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderEffectPassesBuilder &operator=(const ShaderEffectPassesBuilder &);
  flatbuffers::Offset<ShaderEffectPasses> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderEffectPasses>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShaderEffectPasses> CreateShaderEffectPasses(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::ShaderEffect>>> shaderEffectPasses = 0,
    flatbuffers::Offset<flat::ShaderParams> defaultShaderParams = 0) {
  ShaderEffectPassesBuilder builder_(_fbb);
  builder_.add_defaultShaderParams(defaultShaderParams);
  builder_.add_shaderEffectPasses(shaderEffectPasses);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderEffectPasses> CreateShaderEffectPassesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::ShaderEffect>> *shaderEffectPasses = nullptr,
    flatbuffers::Offset<flat::ShaderParams> defaultShaderParams = 0) {
  auto shaderEffectPasses__ = shaderEffectPasses ? _fbb.CreateVector<flatbuffers::Offset<flat::ShaderEffect>>(*shaderEffectPasses) : 0;
  return flat::CreateShaderEffectPasses(
      _fbb,
      shaderEffectPasses__,
      defaultShaderParams);
}

inline const flat::ShaderEffectPasses *GetShaderEffectPasses(const void *buf) {
  return flatbuffers::GetRoot<flat::ShaderEffectPasses>(buf);
}

inline const flat::ShaderEffectPasses *GetSizePrefixedShaderEffectPasses(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::ShaderEffectPasses>(buf);
}

inline const char *ShaderEffectPassesIdentifier() {
  return "sfxp";
}

inline bool ShaderEffectPassesBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ShaderEffectPassesIdentifier());
}

inline bool VerifyShaderEffectPassesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::ShaderEffectPasses>(ShaderEffectPassesIdentifier());
}

inline bool VerifySizePrefixedShaderEffectPassesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::ShaderEffectPasses>(ShaderEffectPassesIdentifier());
}

inline const char *ShaderEffectPassesExtension() {
  return "sfxp";
}

inline void FinishShaderEffectPassesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ShaderEffectPasses> root) {
  fbb.Finish(root, ShaderEffectPassesIdentifier());
}

inline void FinishSizePrefixedShaderEffectPassesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ShaderEffectPasses> root) {
  fbb.FinishSizePrefixed(root, ShaderEffectPassesIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_SHADEREFFECTPASSES_FLAT_H_
