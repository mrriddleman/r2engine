// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADEREFFECT_FLAT_H_
#define FLATBUFFERS_GENERATED_SHADEREFFECT_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct ShaderEffect;
struct ShaderEffectBuilder;

enum eVertexLayoutType {
  eVertexLayoutType_VLT_NONE = 0,
  eVertexLayoutType_VLT_DEFAULT_STATIC = 1,
  eVertexLayoutType_VLT_DEFAULT_DYNAMIC = 2,
  eVertexLayoutType_VLT_DEFAULT_DEBUG_LINE = 3,
  eVertexLayoutType_MIN = eVertexLayoutType_VLT_NONE,
  eVertexLayoutType_MAX = eVertexLayoutType_VLT_DEFAULT_DEBUG_LINE
};

inline const eVertexLayoutType (&EnumValueseVertexLayoutType())[4] {
  static const eVertexLayoutType values[] = {
    eVertexLayoutType_VLT_NONE,
    eVertexLayoutType_VLT_DEFAULT_STATIC,
    eVertexLayoutType_VLT_DEFAULT_DYNAMIC,
    eVertexLayoutType_VLT_DEFAULT_DEBUG_LINE
  };
  return values;
}

inline const char * const *EnumNameseVertexLayoutType() {
  static const char * const names[5] = {
    "VLT_NONE",
    "VLT_DEFAULT_STATIC",
    "VLT_DEFAULT_DYNAMIC",
    "VLT_DEFAULT_DEBUG_LINE",
    nullptr
  };
  return names;
}

inline const char *EnumNameeVertexLayoutType(eVertexLayoutType e) {
  if (flatbuffers::IsOutRange(e, eVertexLayoutType_VLT_NONE, eVertexLayoutType_VLT_DEFAULT_DEBUG_LINE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseVertexLayoutType()[index];
}

struct ShaderEffect FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderEffectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASSETNAME = 4,
    VT_ASSETNAMESTRING = 6,
    VT_STATICSHADER = 8,
    VT_DYNAMICSHADER = 10,
    VT_STATICVERTEXLAYOUT = 12,
    VT_DYNAMICVERTEXLAYOUT = 14
  };
  uint64_t assetName() const {
    return GetField<uint64_t>(VT_ASSETNAME, 0);
  }
  const flatbuffers::String *assetNameString() const {
    return GetPointer<const flatbuffers::String *>(VT_ASSETNAMESTRING);
  }
  uint64_t staticShader() const {
    return GetField<uint64_t>(VT_STATICSHADER, 0);
  }
  uint64_t dynamicShader() const {
    return GetField<uint64_t>(VT_DYNAMICSHADER, 0);
  }
  flat::eVertexLayoutType staticVertexLayout() const {
    return static_cast<flat::eVertexLayoutType>(GetField<uint16_t>(VT_STATICVERTEXLAYOUT, 0));
  }
  flat::eVertexLayoutType dynamicVertexLayout() const {
    return static_cast<flat::eVertexLayoutType>(GetField<uint16_t>(VT_DYNAMICVERTEXLAYOUT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ASSETNAME) &&
           VerifyOffset(verifier, VT_ASSETNAMESTRING) &&
           verifier.VerifyString(assetNameString()) &&
           VerifyField<uint64_t>(verifier, VT_STATICSHADER) &&
           VerifyField<uint64_t>(verifier, VT_DYNAMICSHADER) &&
           VerifyField<uint16_t>(verifier, VT_STATICVERTEXLAYOUT) &&
           VerifyField<uint16_t>(verifier, VT_DYNAMICVERTEXLAYOUT) &&
           verifier.EndTable();
  }
};

struct ShaderEffectBuilder {
  typedef ShaderEffect Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_assetName(uint64_t assetName) {
    fbb_.AddElement<uint64_t>(ShaderEffect::VT_ASSETNAME, assetName, 0);
  }
  void add_assetNameString(flatbuffers::Offset<flatbuffers::String> assetNameString) {
    fbb_.AddOffset(ShaderEffect::VT_ASSETNAMESTRING, assetNameString);
  }
  void add_staticShader(uint64_t staticShader) {
    fbb_.AddElement<uint64_t>(ShaderEffect::VT_STATICSHADER, staticShader, 0);
  }
  void add_dynamicShader(uint64_t dynamicShader) {
    fbb_.AddElement<uint64_t>(ShaderEffect::VT_DYNAMICSHADER, dynamicShader, 0);
  }
  void add_staticVertexLayout(flat::eVertexLayoutType staticVertexLayout) {
    fbb_.AddElement<uint16_t>(ShaderEffect::VT_STATICVERTEXLAYOUT, static_cast<uint16_t>(staticVertexLayout), 0);
  }
  void add_dynamicVertexLayout(flat::eVertexLayoutType dynamicVertexLayout) {
    fbb_.AddElement<uint16_t>(ShaderEffect::VT_DYNAMICVERTEXLAYOUT, static_cast<uint16_t>(dynamicVertexLayout), 0);
  }
  explicit ShaderEffectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderEffectBuilder &operator=(const ShaderEffectBuilder &);
  flatbuffers::Offset<ShaderEffect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderEffect>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShaderEffect> CreateShaderEffect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t assetName = 0,
    flatbuffers::Offset<flatbuffers::String> assetNameString = 0,
    uint64_t staticShader = 0,
    uint64_t dynamicShader = 0,
    flat::eVertexLayoutType staticVertexLayout = flat::eVertexLayoutType_VLT_NONE,
    flat::eVertexLayoutType dynamicVertexLayout = flat::eVertexLayoutType_VLT_NONE) {
  ShaderEffectBuilder builder_(_fbb);
  builder_.add_dynamicShader(dynamicShader);
  builder_.add_staticShader(staticShader);
  builder_.add_assetName(assetName);
  builder_.add_assetNameString(assetNameString);
  builder_.add_dynamicVertexLayout(dynamicVertexLayout);
  builder_.add_staticVertexLayout(staticVertexLayout);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderEffect> CreateShaderEffectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t assetName = 0,
    const char *assetNameString = nullptr,
    uint64_t staticShader = 0,
    uint64_t dynamicShader = 0,
    flat::eVertexLayoutType staticVertexLayout = flat::eVertexLayoutType_VLT_NONE,
    flat::eVertexLayoutType dynamicVertexLayout = flat::eVertexLayoutType_VLT_NONE) {
  auto assetNameString__ = assetNameString ? _fbb.CreateString(assetNameString) : 0;
  return flat::CreateShaderEffect(
      _fbb,
      assetName,
      assetNameString__,
      staticShader,
      dynamicShader,
      staticVertexLayout,
      dynamicVertexLayout);
}

inline const flat::ShaderEffect *GetShaderEffect(const void *buf) {
  return flatbuffers::GetRoot<flat::ShaderEffect>(buf);
}

inline const flat::ShaderEffect *GetSizePrefixedShaderEffect(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::ShaderEffect>(buf);
}

inline const char *ShaderEffectIdentifier() {
  return "seff";
}

inline bool ShaderEffectBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ShaderEffectIdentifier());
}

inline bool VerifyShaderEffectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::ShaderEffect>(ShaderEffectIdentifier());
}

inline bool VerifySizePrefixedShaderEffectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::ShaderEffect>(ShaderEffectIdentifier());
}

inline const char *ShaderEffectExtension() {
  return "seff";
}

inline void FinishShaderEffectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ShaderEffect> root) {
  fbb.Finish(root, ShaderEffectIdentifier());
}

inline void FinishSizePrefixedShaderEffectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::ShaderEffect> root) {
  fbb.FinishSizePrefixed(root, ShaderEffectIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_SHADEREFFECT_FLAT_H_
