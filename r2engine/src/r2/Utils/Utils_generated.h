// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILS_R2_H_
#define FLATBUFFERS_GENERATED_UTILS_R2_H_

#include "flatbuffers/flatbuffers.h"

namespace r2 {

struct Version;
struct VersionBuilder;

struct Version FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VersionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_FBSDEFINITION = 6
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::String *fbsDefinition() const {
    return GetPointer<const flatbuffers::String *>(VT_FBSDEFINITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_FBSDEFINITION) &&
           verifier.VerifyString(fbsDefinition()) &&
           verifier.EndTable();
  }
};

struct VersionBuilder {
  typedef Version Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(Version::VT_VERSION, version, 0);
  }
  void add_fbsDefinition(flatbuffers::Offset<flatbuffers::String> fbsDefinition) {
    fbb_.AddOffset(Version::VT_FBSDEFINITION, fbsDefinition);
  }
  explicit VersionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VersionBuilder &operator=(const VersionBuilder &);
  flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline flatbuffers::Offset<Version> CreateVersion(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flatbuffers::String> fbsDefinition = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_fbsDefinition(fbsDefinition);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Version> CreateVersionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    const char *fbsDefinition = nullptr) {
  auto fbsDefinition__ = fbsDefinition ? _fbb.CreateString(fbsDefinition) : 0;
  return r2::CreateVersion(
      _fbb,
      version,
      fbsDefinition__);
}

inline const r2::Version *GetVersion(const void *buf) {
  return flatbuffers::GetRoot<r2::Version>(buf);
}

inline const r2::Version *GetSizePrefixedVersion(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<r2::Version>(buf);
}

inline bool VerifyVersionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<r2::Version>(nullptr);
}

inline bool VerifySizePrefixedVersionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<r2::Version>(nullptr);
}

inline void FinishVersionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r2::Version> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVersionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r2::Version> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace r2

#endif  // FLATBUFFERS_GENERATED_UTILS_R2_H_
