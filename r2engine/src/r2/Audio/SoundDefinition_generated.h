// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOUNDDEFINITION_FLAT_H_
#define FLATBUFFERS_GENERATED_SOUNDDEFINITION_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "AssetName_generated.h"
#include "AssetRef_generated.h"

namespace flat {

struct SoundDefinitions;
struct SoundDefinitionsBuilder;

struct SoundDefinitions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoundDefinitionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_MASTERBANK = 6,
    VT_MASTERBANKSTRINGS = 8,
    VT_BANKS = 10
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetRef *masterBank() const {
    return GetPointer<const flat::AssetRef *>(VT_MASTERBANK);
  }
  const flat::AssetRef *masterBankStrings() const {
    return GetPointer<const flat::AssetRef *>(VT_MASTERBANKSTRINGS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *banks() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *>(VT_BANKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_MASTERBANK) &&
           verifier.VerifyTable(masterBank()) &&
           VerifyOffset(verifier, VT_MASTERBANKSTRINGS) &&
           verifier.VerifyTable(masterBankStrings()) &&
           VerifyOffset(verifier, VT_BANKS) &&
           verifier.VerifyVector(banks()) &&
           verifier.VerifyVectorOfTables(banks()) &&
           verifier.EndTable();
  }
};

struct SoundDefinitionsBuilder {
  typedef SoundDefinitions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(SoundDefinitions::VT_VERSION, version, 0);
  }
  void add_masterBank(flatbuffers::Offset<flat::AssetRef> masterBank) {
    fbb_.AddOffset(SoundDefinitions::VT_MASTERBANK, masterBank);
  }
  void add_masterBankStrings(flatbuffers::Offset<flat::AssetRef> masterBankStrings) {
    fbb_.AddOffset(SoundDefinitions::VT_MASTERBANKSTRINGS, masterBankStrings);
  }
  void add_banks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> banks) {
    fbb_.AddOffset(SoundDefinitions::VT_BANKS, banks);
  }
  explicit SoundDefinitionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SoundDefinitionsBuilder &operator=(const SoundDefinitionsBuilder &);
  flatbuffers::Offset<SoundDefinitions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SoundDefinitions>(end);
    return o;
  }
};

inline flatbuffers::Offset<SoundDefinitions> CreateSoundDefinitions(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetRef> masterBank = 0,
    flatbuffers::Offset<flat::AssetRef> masterBankStrings = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> banks = 0) {
  SoundDefinitionsBuilder builder_(_fbb);
  builder_.add_banks(banks);
  builder_.add_masterBankStrings(masterBankStrings);
  builder_.add_masterBank(masterBank);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<SoundDefinitions> CreateSoundDefinitionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetRef> masterBank = 0,
    flatbuffers::Offset<flat::AssetRef> masterBankStrings = 0,
    const std::vector<flatbuffers::Offset<flat::AssetRef>> *banks = nullptr) {
  auto banks__ = banks ? _fbb.CreateVector<flatbuffers::Offset<flat::AssetRef>>(*banks) : 0;
  return flat::CreateSoundDefinitions(
      _fbb,
      version,
      masterBank,
      masterBankStrings,
      banks__);
}

inline const flat::SoundDefinitions *GetSoundDefinitions(const void *buf) {
  return flatbuffers::GetRoot<flat::SoundDefinitions>(buf);
}

inline const flat::SoundDefinitions *GetSizePrefixedSoundDefinitions(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::SoundDefinitions>(buf);
}

inline const char *SoundDefinitionsIdentifier() {
  return "sdef";
}

inline bool SoundDefinitionsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SoundDefinitionsIdentifier());
}

inline bool VerifySoundDefinitionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::SoundDefinitions>(SoundDefinitionsIdentifier());
}

inline bool VerifySizePrefixedSoundDefinitionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::SoundDefinitions>(SoundDefinitionsIdentifier());
}

inline const char *SoundDefinitionsExtension() {
  return "sdef";
}

inline void FinishSoundDefinitionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::SoundDefinitions> root) {
  fbb.Finish(root, SoundDefinitionsIdentifier());
}

inline void FinishSizePrefixedSoundDefinitionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::SoundDefinitions> root) {
  fbb.FinishSizePrefixed(root, SoundDefinitionsIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_SOUNDDEFINITION_FLAT_H_
