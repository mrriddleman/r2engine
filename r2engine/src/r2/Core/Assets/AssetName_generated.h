// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ASSETNAME_FLAT_H_
#define FLATBUFFERS_GENERATED_ASSETNAME_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct UUID;

struct AssetName;
struct AssetNameBuilder;

struct MaterialName;
struct MaterialNameBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) UUID FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t uuid_[16];

 public:
  UUID() {
    memset(static_cast<void *>(this), 0, sizeof(UUID));
  }
  const flatbuffers::Array<uint8_t, 16> *uuid() const {
    return reinterpret_cast<const flatbuffers::Array<uint8_t, 16> *>(uuid_);
  }
};
FLATBUFFERS_STRUCT_END(UUID, 16);

struct AssetName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AssetNameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_ASSETNAME = 6,
    VT_STRINGNAME = 8
  };
  const flat::UUID *uuid() const {
    return GetStruct<const flat::UUID *>(VT_UUID);
  }
  uint64_t assetName() const {
    return GetField<uint64_t>(VT_ASSETNAME, 0);
  }
  const flatbuffers::String *stringName() const {
    return GetPointer<const flatbuffers::String *>(VT_STRINGNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flat::UUID>(verifier, VT_UUID) &&
           VerifyField<uint64_t>(verifier, VT_ASSETNAME) &&
           VerifyOffset(verifier, VT_STRINGNAME) &&
           verifier.VerifyString(stringName()) &&
           verifier.EndTable();
  }
};

struct AssetNameBuilder {
  typedef AssetName Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(const flat::UUID *uuid) {
    fbb_.AddStruct(AssetName::VT_UUID, uuid);
  }
  void add_assetName(uint64_t assetName) {
    fbb_.AddElement<uint64_t>(AssetName::VT_ASSETNAME, assetName, 0);
  }
  void add_stringName(flatbuffers::Offset<flatbuffers::String> stringName) {
    fbb_.AddOffset(AssetName::VT_STRINGNAME, stringName);
  }
  explicit AssetNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AssetNameBuilder &operator=(const AssetNameBuilder &);
  flatbuffers::Offset<AssetName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AssetName>(end);
    return o;
  }
};

inline flatbuffers::Offset<AssetName> CreateAssetName(
    flatbuffers::FlatBufferBuilder &_fbb,
    const flat::UUID *uuid = 0,
    uint64_t assetName = 0,
    flatbuffers::Offset<flatbuffers::String> stringName = 0) {
  AssetNameBuilder builder_(_fbb);
  builder_.add_assetName(assetName);
  builder_.add_stringName(stringName);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<AssetName> CreateAssetNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const flat::UUID *uuid = 0,
    uint64_t assetName = 0,
    const char *stringName = nullptr) {
  auto stringName__ = stringName ? _fbb.CreateString(stringName) : 0;
  return flat::CreateAssetName(
      _fbb,
      uuid,
      assetName,
      stringName__);
}

struct MaterialName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialNameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MATERIALPACKNAME = 6
  };
  const flat::AssetName *name() const {
    return GetPointer<const flat::AssetName *>(VT_NAME);
  }
  const flat::AssetName *materialPackName() const {
    return GetPointer<const flat::AssetName *>(VT_MATERIALPACKNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_MATERIALPACKNAME) &&
           verifier.VerifyTable(materialPackName()) &&
           verifier.EndTable();
  }
};

struct MaterialNameBuilder {
  typedef MaterialName Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flat::AssetName> name) {
    fbb_.AddOffset(MaterialName::VT_NAME, name);
  }
  void add_materialPackName(flatbuffers::Offset<flat::AssetName> materialPackName) {
    fbb_.AddOffset(MaterialName::VT_MATERIALPACKNAME, materialPackName);
  }
  explicit MaterialNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialNameBuilder &operator=(const MaterialNameBuilder &);
  flatbuffers::Offset<MaterialName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialName>(end);
    return o;
  }
};

inline flatbuffers::Offset<MaterialName> CreateMaterialName(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::AssetName> name = 0,
    flatbuffers::Offset<flat::AssetName> materialPackName = 0) {
  MaterialNameBuilder builder_(_fbb);
  builder_.add_materialPackName(materialPackName);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const flat::AssetName *GetAssetName(const void *buf) {
  return flatbuffers::GetRoot<flat::AssetName>(buf);
}

inline const flat::AssetName *GetSizePrefixedAssetName(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::AssetName>(buf);
}

inline const char *AssetNameIdentifier() {
  return "rast";
}

inline bool AssetNameBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, AssetNameIdentifier());
}

inline bool VerifyAssetNameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::AssetName>(AssetNameIdentifier());
}

inline bool VerifySizePrefixedAssetNameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::AssetName>(AssetNameIdentifier());
}

inline const char *AssetNameExtension() {
  return "rast";
}

inline void FinishAssetNameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AssetName> root) {
  fbb.Finish(root, AssetNameIdentifier());
}

inline void FinishSizePrefixedAssetNameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AssetName> root) {
  fbb.FinishSizePrefixed(root, AssetNameIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_ASSETNAME_FLAT_H_
