// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADERMANIFEST_R2_H_
#define FLATBUFFERS_GENERATED_SHADERMANIFEST_R2_H_

#include "flatbuffers/flatbuffers.h"

namespace r2 {

struct ShaderManifest;
struct ShaderManifestBuilder;

struct ShaderManifests;
struct ShaderManifestsBuilder;

struct ShaderManifest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderManifestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHADERNAME = 4,
    VT_VERTEXPATH = 6,
    VT_FRAGMENTPATH = 8,
    VT_GEOMETRYPATH = 10,
    VT_COMPUTEPATH = 12,
    VT_BINARYPATH = 14
  };
  uint64_t shaderName() const {
    return GetField<uint64_t>(VT_SHADERNAME, 0);
  }
  const flatbuffers::String *vertexPath() const {
    return GetPointer<const flatbuffers::String *>(VT_VERTEXPATH);
  }
  const flatbuffers::String *fragmentPath() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAGMENTPATH);
  }
  const flatbuffers::String *geometryPath() const {
    return GetPointer<const flatbuffers::String *>(VT_GEOMETRYPATH);
  }
  const flatbuffers::String *computePath() const {
    return GetPointer<const flatbuffers::String *>(VT_COMPUTEPATH);
  }
  const flatbuffers::String *binaryPath() const {
    return GetPointer<const flatbuffers::String *>(VT_BINARYPATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SHADERNAME) &&
           VerifyOffset(verifier, VT_VERTEXPATH) &&
           verifier.VerifyString(vertexPath()) &&
           VerifyOffset(verifier, VT_FRAGMENTPATH) &&
           verifier.VerifyString(fragmentPath()) &&
           VerifyOffset(verifier, VT_GEOMETRYPATH) &&
           verifier.VerifyString(geometryPath()) &&
           VerifyOffset(verifier, VT_COMPUTEPATH) &&
           verifier.VerifyString(computePath()) &&
           VerifyOffset(verifier, VT_BINARYPATH) &&
           verifier.VerifyString(binaryPath()) &&
           verifier.EndTable();
  }
};

struct ShaderManifestBuilder {
  typedef ShaderManifest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shaderName(uint64_t shaderName) {
    fbb_.AddElement<uint64_t>(ShaderManifest::VT_SHADERNAME, shaderName, 0);
  }
  void add_vertexPath(flatbuffers::Offset<flatbuffers::String> vertexPath) {
    fbb_.AddOffset(ShaderManifest::VT_VERTEXPATH, vertexPath);
  }
  void add_fragmentPath(flatbuffers::Offset<flatbuffers::String> fragmentPath) {
    fbb_.AddOffset(ShaderManifest::VT_FRAGMENTPATH, fragmentPath);
  }
  void add_geometryPath(flatbuffers::Offset<flatbuffers::String> geometryPath) {
    fbb_.AddOffset(ShaderManifest::VT_GEOMETRYPATH, geometryPath);
  }
  void add_computePath(flatbuffers::Offset<flatbuffers::String> computePath) {
    fbb_.AddOffset(ShaderManifest::VT_COMPUTEPATH, computePath);
  }
  void add_binaryPath(flatbuffers::Offset<flatbuffers::String> binaryPath) {
    fbb_.AddOffset(ShaderManifest::VT_BINARYPATH, binaryPath);
  }
  explicit ShaderManifestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderManifestBuilder &operator=(const ShaderManifestBuilder &);
  flatbuffers::Offset<ShaderManifest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderManifest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShaderManifest> CreateShaderManifest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t shaderName = 0,
    flatbuffers::Offset<flatbuffers::String> vertexPath = 0,
    flatbuffers::Offset<flatbuffers::String> fragmentPath = 0,
    flatbuffers::Offset<flatbuffers::String> geometryPath = 0,
    flatbuffers::Offset<flatbuffers::String> computePath = 0,
    flatbuffers::Offset<flatbuffers::String> binaryPath = 0) {
  ShaderManifestBuilder builder_(_fbb);
  builder_.add_shaderName(shaderName);
  builder_.add_binaryPath(binaryPath);
  builder_.add_computePath(computePath);
  builder_.add_geometryPath(geometryPath);
  builder_.add_fragmentPath(fragmentPath);
  builder_.add_vertexPath(vertexPath);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderManifest> CreateShaderManifestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t shaderName = 0,
    const char *vertexPath = nullptr,
    const char *fragmentPath = nullptr,
    const char *geometryPath = nullptr,
    const char *computePath = nullptr,
    const char *binaryPath = nullptr) {
  auto vertexPath__ = vertexPath ? _fbb.CreateString(vertexPath) : 0;
  auto fragmentPath__ = fragmentPath ? _fbb.CreateString(fragmentPath) : 0;
  auto geometryPath__ = geometryPath ? _fbb.CreateString(geometryPath) : 0;
  auto computePath__ = computePath ? _fbb.CreateString(computePath) : 0;
  auto binaryPath__ = binaryPath ? _fbb.CreateString(binaryPath) : 0;
  return r2::CreateShaderManifest(
      _fbb,
      shaderName,
      vertexPath__,
      fragmentPath__,
      geometryPath__,
      computePath__,
      binaryPath__);
}

struct ShaderManifests FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderManifestsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MANIFESTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<r2::ShaderManifest>> *manifests() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<r2::ShaderManifest>> *>(VT_MANIFESTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MANIFESTS) &&
           verifier.VerifyVector(manifests()) &&
           verifier.VerifyVectorOfTables(manifests()) &&
           verifier.EndTable();
  }
};

struct ShaderManifestsBuilder {
  typedef ShaderManifests Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_manifests(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<r2::ShaderManifest>>> manifests) {
    fbb_.AddOffset(ShaderManifests::VT_MANIFESTS, manifests);
  }
  explicit ShaderManifestsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderManifestsBuilder &operator=(const ShaderManifestsBuilder &);
  flatbuffers::Offset<ShaderManifests> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderManifests>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShaderManifests> CreateShaderManifests(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<r2::ShaderManifest>>> manifests = 0) {
  ShaderManifestsBuilder builder_(_fbb);
  builder_.add_manifests(manifests);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderManifests> CreateShaderManifestsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<r2::ShaderManifest>> *manifests = nullptr) {
  auto manifests__ = manifests ? _fbb.CreateVector<flatbuffers::Offset<r2::ShaderManifest>>(*manifests) : 0;
  return r2::CreateShaderManifests(
      _fbb,
      manifests__);
}

inline const r2::ShaderManifests *GetShaderManifests(const void *buf) {
  return flatbuffers::GetRoot<r2::ShaderManifests>(buf);
}

inline const r2::ShaderManifests *GetSizePrefixedShaderManifests(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<r2::ShaderManifests>(buf);
}

inline const char *ShaderManifestsIdentifier() {
  return "sman";
}

inline bool ShaderManifestsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ShaderManifestsIdentifier());
}

inline bool VerifyShaderManifestsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<r2::ShaderManifests>(ShaderManifestsIdentifier());
}

inline bool VerifySizePrefixedShaderManifestsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<r2::ShaderManifests>(ShaderManifestsIdentifier());
}

inline const char *ShaderManifestsExtension() {
  return "sman";
}

inline void FinishShaderManifestsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r2::ShaderManifests> root) {
  fbb.Finish(root, ShaderManifestsIdentifier());
}

inline void FinishSizePrefixedShaderManifestsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r2::ShaderManifests> root) {
  fbb.FinishSizePrefixed(root, ShaderManifestsIdentifier());
}

}  // namespace r2

#endif  // FLATBUFFERS_GENERATED_SHADERMANIFEST_R2_H_
