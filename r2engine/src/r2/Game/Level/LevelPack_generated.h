// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_
#define FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "AssetName_generated.h"
#include "AssetRef_generated.h"

namespace flat {

struct LevelGroupData;
struct LevelGroupDataBuilder;

struct LevelPackData;
struct LevelPackDataBuilder;

struct LevelGroupData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelGroupDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_ASSETNAME = 6,
    VT_LEVELS = 8
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *levels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>> *>(VT_LEVELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_LEVELS) &&
           verifier.VerifyVector(levels()) &&
           verifier.VerifyVectorOfTables(levels()) &&
           verifier.EndTable();
  }
};

struct LevelGroupDataBuilder {
  typedef LevelGroupData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(LevelGroupData::VT_VERSION, version, 0);
  }
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(LevelGroupData::VT_ASSETNAME, assetName);
  }
  void add_levels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> levels) {
    fbb_.AddOffset(LevelGroupData::VT_LEVELS, levels);
  }
  explicit LevelGroupDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelGroupDataBuilder &operator=(const LevelGroupDataBuilder &);
  flatbuffers::Offset<LevelGroupData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelGroupData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelGroupData> CreateLevelGroupData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AssetRef>>> levels = 0) {
  LevelGroupDataBuilder builder_(_fbb);
  builder_.add_levels(levels);
  builder_.add_assetName(assetName);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelGroupData> CreateLevelGroupDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::AssetRef>> *levels = nullptr) {
  auto levels__ = levels ? _fbb.CreateVector<flatbuffers::Offset<flat::AssetRef>>(*levels) : 0;
  return flat::CreateLevelGroupData(
      _fbb,
      version,
      assetName,
      levels__);
}

struct LevelPackData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelPackDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_ASSETNAME = 6,
    VT_LEVELGROUPS = 8
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flat::AssetName *assetName() const {
    return GetPointer<const flat::AssetName *>(VT_ASSETNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>> *levelGroups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>> *>(VT_LEVELGROUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyTable(assetName()) &&
           VerifyOffset(verifier, VT_LEVELGROUPS) &&
           verifier.VerifyVector(levelGroups()) &&
           verifier.VerifyVectorOfTables(levelGroups()) &&
           verifier.EndTable();
  }
};

struct LevelPackDataBuilder {
  typedef LevelPackData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(LevelPackData::VT_VERSION, version, 0);
  }
  void add_assetName(flatbuffers::Offset<flat::AssetName> assetName) {
    fbb_.AddOffset(LevelPackData::VT_ASSETNAME, assetName);
  }
  void add_levelGroups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>>> levelGroups) {
    fbb_.AddOffset(LevelPackData::VT_LEVELGROUPS, levelGroups);
  }
  explicit LevelPackDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelPackDataBuilder &operator=(const LevelPackDataBuilder &);
  flatbuffers::Offset<LevelPackData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelPackData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelPackData> CreateLevelPackData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>>> levelGroups = 0) {
  LevelPackDataBuilder builder_(_fbb);
  builder_.add_levelGroups(levelGroups);
  builder_.add_assetName(assetName);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelPackData> CreateLevelPackDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flat::AssetName> assetName = 0,
    const std::vector<flatbuffers::Offset<flat::LevelGroupData>> *levelGroups = nullptr) {
  auto levelGroups__ = levelGroups ? _fbb.CreateVector<flatbuffers::Offset<flat::LevelGroupData>>(*levelGroups) : 0;
  return flat::CreateLevelPackData(
      _fbb,
      version,
      assetName,
      levelGroups__);
}

inline const flat::LevelPackData *GetLevelPackData(const void *buf) {
  return flatbuffers::GetRoot<flat::LevelPackData>(buf);
}

inline const flat::LevelPackData *GetSizePrefixedLevelPackData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::LevelPackData>(buf);
}

inline const char *LevelPackDataIdentifier() {
  return "rlpk";
}

inline bool LevelPackDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LevelPackDataIdentifier());
}

inline bool VerifyLevelPackDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::LevelPackData>(LevelPackDataIdentifier());
}

inline bool VerifySizePrefixedLevelPackDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::LevelPackData>(LevelPackDataIdentifier());
}

inline const char *LevelPackDataExtension() {
  return "rlpk";
}

inline void FinishLevelPackDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::LevelPackData> root) {
  fbb.Finish(root, LevelPackDataIdentifier());
}

inline void FinishSizePrefixedLevelPackDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::LevelPackData> root) {
  fbb.FinishSizePrefixed(root, LevelPackDataIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_
