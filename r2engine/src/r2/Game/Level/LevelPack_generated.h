// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_
#define FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct LevelRef;
struct LevelRefBuilder;

struct LevelGroupData;
struct LevelGroupDataBuilder;

struct LevelPackData;
struct LevelPackDataBuilder;

struct LevelRef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelRefBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEVELNAME = 4,
    VT_LEVELPATH = 6,
    VT_LEVELFILESIZE = 8
  };
  const flatbuffers::String *levelName() const {
    return GetPointer<const flatbuffers::String *>(VT_LEVELNAME);
  }
  const flatbuffers::String *levelPath() const {
    return GetPointer<const flatbuffers::String *>(VT_LEVELPATH);
  }
  uint32_t levelFileSize() const {
    return GetField<uint32_t>(VT_LEVELFILESIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LEVELNAME) &&
           verifier.VerifyString(levelName()) &&
           VerifyOffset(verifier, VT_LEVELPATH) &&
           verifier.VerifyString(levelPath()) &&
           VerifyField<uint32_t>(verifier, VT_LEVELFILESIZE) &&
           verifier.EndTable();
  }
};

struct LevelRefBuilder {
  typedef LevelRef Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_levelName(flatbuffers::Offset<flatbuffers::String> levelName) {
    fbb_.AddOffset(LevelRef::VT_LEVELNAME, levelName);
  }
  void add_levelPath(flatbuffers::Offset<flatbuffers::String> levelPath) {
    fbb_.AddOffset(LevelRef::VT_LEVELPATH, levelPath);
  }
  void add_levelFileSize(uint32_t levelFileSize) {
    fbb_.AddElement<uint32_t>(LevelRef::VT_LEVELFILESIZE, levelFileSize, 0);
  }
  explicit LevelRefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelRefBuilder &operator=(const LevelRefBuilder &);
  flatbuffers::Offset<LevelRef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelRef>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelRef> CreateLevelRef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> levelName = 0,
    flatbuffers::Offset<flatbuffers::String> levelPath = 0,
    uint32_t levelFileSize = 0) {
  LevelRefBuilder builder_(_fbb);
  builder_.add_levelFileSize(levelFileSize);
  builder_.add_levelPath(levelPath);
  builder_.add_levelName(levelName);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelRef> CreateLevelRefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *levelName = nullptr,
    const char *levelPath = nullptr,
    uint32_t levelFileSize = 0) {
  auto levelName__ = levelName ? _fbb.CreateString(levelName) : 0;
  auto levelPath__ = levelPath ? _fbb.CreateString(levelPath) : 0;
  return flat::CreateLevelRef(
      _fbb,
      levelName__,
      levelPath__,
      levelFileSize);
}

struct LevelGroupData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelGroupDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPNAME = 4,
    VT_GROUPHASH = 6,
    VT_MAXLEVELSIZEINGROUP = 8,
    VT_GROUPSIZEINBYTES = 10,
    VT_LEVELS = 12
  };
  const flatbuffers::String *groupName() const {
    return GetPointer<const flatbuffers::String *>(VT_GROUPNAME);
  }
  uint64_t groupHash() const {
    return GetField<uint64_t>(VT_GROUPHASH, 0);
  }
  uint32_t maxLevelSizeInGroup() const {
    return GetField<uint32_t>(VT_MAXLEVELSIZEINGROUP, 0);
  }
  uint32_t groupSizeInBytes() const {
    return GetField<uint32_t>(VT_GROUPSIZEINBYTES, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::LevelRef>> *levels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::LevelRef>> *>(VT_LEVELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUPNAME) &&
           verifier.VerifyString(groupName()) &&
           VerifyField<uint64_t>(verifier, VT_GROUPHASH) &&
           VerifyField<uint32_t>(verifier, VT_MAXLEVELSIZEINGROUP) &&
           VerifyField<uint32_t>(verifier, VT_GROUPSIZEINBYTES) &&
           VerifyOffset(verifier, VT_LEVELS) &&
           verifier.VerifyVector(levels()) &&
           verifier.VerifyVectorOfTables(levels()) &&
           verifier.EndTable();
  }
};

struct LevelGroupDataBuilder {
  typedef LevelGroupData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_groupName(flatbuffers::Offset<flatbuffers::String> groupName) {
    fbb_.AddOffset(LevelGroupData::VT_GROUPNAME, groupName);
  }
  void add_groupHash(uint64_t groupHash) {
    fbb_.AddElement<uint64_t>(LevelGroupData::VT_GROUPHASH, groupHash, 0);
  }
  void add_maxLevelSizeInGroup(uint32_t maxLevelSizeInGroup) {
    fbb_.AddElement<uint32_t>(LevelGroupData::VT_MAXLEVELSIZEINGROUP, maxLevelSizeInGroup, 0);
  }
  void add_groupSizeInBytes(uint32_t groupSizeInBytes) {
    fbb_.AddElement<uint32_t>(LevelGroupData::VT_GROUPSIZEINBYTES, groupSizeInBytes, 0);
  }
  void add_levels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelRef>>> levels) {
    fbb_.AddOffset(LevelGroupData::VT_LEVELS, levels);
  }
  explicit LevelGroupDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelGroupDataBuilder &operator=(const LevelGroupDataBuilder &);
  flatbuffers::Offset<LevelGroupData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelGroupData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelGroupData> CreateLevelGroupData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> groupName = 0,
    uint64_t groupHash = 0,
    uint32_t maxLevelSizeInGroup = 0,
    uint32_t groupSizeInBytes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelRef>>> levels = 0) {
  LevelGroupDataBuilder builder_(_fbb);
  builder_.add_groupHash(groupHash);
  builder_.add_levels(levels);
  builder_.add_groupSizeInBytes(groupSizeInBytes);
  builder_.add_maxLevelSizeInGroup(maxLevelSizeInGroup);
  builder_.add_groupName(groupName);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelGroupData> CreateLevelGroupDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *groupName = nullptr,
    uint64_t groupHash = 0,
    uint32_t maxLevelSizeInGroup = 0,
    uint32_t groupSizeInBytes = 0,
    const std::vector<flatbuffers::Offset<flat::LevelRef>> *levels = nullptr) {
  auto groupName__ = groupName ? _fbb.CreateString(groupName) : 0;
  auto levels__ = levels ? _fbb.CreateVector<flatbuffers::Offset<flat::LevelRef>>(*levels) : 0;
  return flat::CreateLevelGroupData(
      _fbb,
      groupName__,
      groupHash,
      maxLevelSizeInGroup,
      groupSizeInBytes,
      levels__);
}

struct LevelPackData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelPackDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAXLEVELSINAGROUP = 4,
    VT_MAXLEVELSIZEINBYTES = 6,
    VT_MAXGROUPSIZEINBYTES = 8,
    VT_ALLLEVELS = 10
  };
  uint32_t maxLevelsInAGroup() const {
    return GetField<uint32_t>(VT_MAXLEVELSINAGROUP, 0);
  }
  uint32_t maxLevelSizeInBytes() const {
    return GetField<uint32_t>(VT_MAXLEVELSIZEINBYTES, 0);
  }
  uint32_t maxGroupSizeInBytes() const {
    return GetField<uint32_t>(VT_MAXGROUPSIZEINBYTES, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>> *allLevels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>> *>(VT_ALLLEVELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MAXLEVELSINAGROUP) &&
           VerifyField<uint32_t>(verifier, VT_MAXLEVELSIZEINBYTES) &&
           VerifyField<uint32_t>(verifier, VT_MAXGROUPSIZEINBYTES) &&
           VerifyOffset(verifier, VT_ALLLEVELS) &&
           verifier.VerifyVector(allLevels()) &&
           verifier.VerifyVectorOfTables(allLevels()) &&
           verifier.EndTable();
  }
};

struct LevelPackDataBuilder {
  typedef LevelPackData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_maxLevelsInAGroup(uint32_t maxLevelsInAGroup) {
    fbb_.AddElement<uint32_t>(LevelPackData::VT_MAXLEVELSINAGROUP, maxLevelsInAGroup, 0);
  }
  void add_maxLevelSizeInBytes(uint32_t maxLevelSizeInBytes) {
    fbb_.AddElement<uint32_t>(LevelPackData::VT_MAXLEVELSIZEINBYTES, maxLevelSizeInBytes, 0);
  }
  void add_maxGroupSizeInBytes(uint32_t maxGroupSizeInBytes) {
    fbb_.AddElement<uint32_t>(LevelPackData::VT_MAXGROUPSIZEINBYTES, maxGroupSizeInBytes, 0);
  }
  void add_allLevels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>>> allLevels) {
    fbb_.AddOffset(LevelPackData::VT_ALLLEVELS, allLevels);
  }
  explicit LevelPackDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LevelPackDataBuilder &operator=(const LevelPackDataBuilder &);
  flatbuffers::Offset<LevelPackData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LevelPackData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LevelPackData> CreateLevelPackData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t maxLevelsInAGroup = 0,
    uint32_t maxLevelSizeInBytes = 0,
    uint32_t maxGroupSizeInBytes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::LevelGroupData>>> allLevels = 0) {
  LevelPackDataBuilder builder_(_fbb);
  builder_.add_allLevels(allLevels);
  builder_.add_maxGroupSizeInBytes(maxGroupSizeInBytes);
  builder_.add_maxLevelSizeInBytes(maxLevelSizeInBytes);
  builder_.add_maxLevelsInAGroup(maxLevelsInAGroup);
  return builder_.Finish();
}

inline flatbuffers::Offset<LevelPackData> CreateLevelPackDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t maxLevelsInAGroup = 0,
    uint32_t maxLevelSizeInBytes = 0,
    uint32_t maxGroupSizeInBytes = 0,
    const std::vector<flatbuffers::Offset<flat::LevelGroupData>> *allLevels = nullptr) {
  auto allLevels__ = allLevels ? _fbb.CreateVector<flatbuffers::Offset<flat::LevelGroupData>>(*allLevels) : 0;
  return flat::CreateLevelPackData(
      _fbb,
      maxLevelsInAGroup,
      maxLevelSizeInBytes,
      maxGroupSizeInBytes,
      allLevels__);
}

inline const flat::LevelPackData *GetLevelPackData(const void *buf) {
  return flatbuffers::GetRoot<flat::LevelPackData>(buf);
}

inline const flat::LevelPackData *GetSizePrefixedLevelPackData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::LevelPackData>(buf);
}

inline const char *LevelPackDataIdentifier() {
  return "rlpk";
}

inline bool LevelPackDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LevelPackDataIdentifier());
}

inline bool VerifyLevelPackDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::LevelPackData>(LevelPackDataIdentifier());
}

inline bool VerifySizePrefixedLevelPackDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::LevelPackData>(LevelPackDataIdentifier());
}

inline const char *LevelPackDataExtension() {
  return "rlpk";
}

inline void FinishLevelPackDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::LevelPackData> root) {
  fbb.Finish(root, LevelPackDataIdentifier());
}

inline void FinishSizePrefixedLevelPackDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::LevelPackData> root) {
  fbb.FinishSizePrefixed(root, LevelPackDataIdentifier());
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_LEVELPACK_FLAT_H_
