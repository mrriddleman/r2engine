// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_PLAYERCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct Player;
struct PlayerBuilder;

struct PlayerComponentArrayData;
struct PlayerComponentArrayDataBuilder;

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4
  };
  int32_t playerID() const {
    return GetField<int32_t>(VT_PLAYERID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERID) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_playerID(int32_t playerID) {
    fbb_.AddElement<int32_t>(Player::VT_PLAYERID, playerID, 0);
  }
  explicit PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerBuilder &operator=(const PlayerBuilder &);
  flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t playerID = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_playerID(playerID);
  return builder_.Finish();
}

struct PlayerComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERDATACOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::Player>> *playerDataComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::Player>> *>(VT_PLAYERDATACOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERDATACOMPONENTARRAY) &&
           verifier.VerifyVector(playerDataComponentArray()) &&
           verifier.VerifyVectorOfTables(playerDataComponentArray()) &&
           verifier.EndTable();
  }
};

struct PlayerComponentArrayDataBuilder {
  typedef PlayerComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_playerDataComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Player>>> playerDataComponentArray) {
    fbb_.AddOffset(PlayerComponentArrayData::VT_PLAYERDATACOMPONENTARRAY, playerDataComponentArray);
  }
  explicit PlayerComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerComponentArrayDataBuilder &operator=(const PlayerComponentArrayDataBuilder &);
  flatbuffers::Offset<PlayerComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerComponentArrayData> CreatePlayerComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Player>>> playerDataComponentArray = 0) {
  PlayerComponentArrayDataBuilder builder_(_fbb);
  builder_.add_playerDataComponentArray(playerDataComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayerComponentArrayData> CreatePlayerComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::Player>> *playerDataComponentArray = nullptr) {
  auto playerDataComponentArray__ = playerDataComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::Player>>(*playerDataComponentArray) : 0;
  return flat::CreatePlayerComponentArrayData(
      _fbb,
      playerDataComponentArray__);
}

inline const flat::PlayerComponentArrayData *GetPlayerComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::PlayerComponentArrayData>(buf);
}

inline const flat::PlayerComponentArrayData *GetSizePrefixedPlayerComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::PlayerComponentArrayData>(buf);
}

inline bool VerifyPlayerComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::PlayerComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedPlayerComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::PlayerComponentArrayData>(nullptr);
}

inline void FinishPlayerComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::PlayerComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::PlayerComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_PLAYERCOMPONENTARRAYDATA_FLAT_H_
