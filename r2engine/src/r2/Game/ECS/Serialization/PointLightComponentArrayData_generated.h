// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINTLIGHTCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_POINTLIGHTCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "LightProperties_generated.h"

namespace flat {

struct PointLightData;
struct PointLightDataBuilder;

struct PointLightComponentArrayData;
struct PointLightComponentArrayDataBuilder;

struct PointLightData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PointLightDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIGHTPROPERTIES = 4
  };
  const flat::LightProperties *lightProperties() const {
    return GetPointer<const flat::LightProperties *>(VT_LIGHTPROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIGHTPROPERTIES) &&
           verifier.VerifyTable(lightProperties()) &&
           verifier.EndTable();
  }
};

struct PointLightDataBuilder {
  typedef PointLightData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lightProperties(flatbuffers::Offset<flat::LightProperties> lightProperties) {
    fbb_.AddOffset(PointLightData::VT_LIGHTPROPERTIES, lightProperties);
  }
  explicit PointLightDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointLightDataBuilder &operator=(const PointLightDataBuilder &);
  flatbuffers::Offset<PointLightData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointLightData>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointLightData> CreatePointLightData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::LightProperties> lightProperties = 0) {
  PointLightDataBuilder builder_(_fbb);
  builder_.add_lightProperties(lightProperties);
  return builder_.Finish();
}

struct PointLightComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PointLightComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTLIGHTCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::PointLightData>> *pointLightComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::PointLightData>> *>(VT_POINTLIGHTCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTLIGHTCOMPONENTARRAY) &&
           verifier.VerifyVector(pointLightComponentArray()) &&
           verifier.VerifyVectorOfTables(pointLightComponentArray()) &&
           verifier.EndTable();
  }
};

struct PointLightComponentArrayDataBuilder {
  typedef PointLightComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pointLightComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::PointLightData>>> pointLightComponentArray) {
    fbb_.AddOffset(PointLightComponentArrayData::VT_POINTLIGHTCOMPONENTARRAY, pointLightComponentArray);
  }
  explicit PointLightComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointLightComponentArrayDataBuilder &operator=(const PointLightComponentArrayDataBuilder &);
  flatbuffers::Offset<PointLightComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointLightComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointLightComponentArrayData> CreatePointLightComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::PointLightData>>> pointLightComponentArray = 0) {
  PointLightComponentArrayDataBuilder builder_(_fbb);
  builder_.add_pointLightComponentArray(pointLightComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<PointLightComponentArrayData> CreatePointLightComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::PointLightData>> *pointLightComponentArray = nullptr) {
  auto pointLightComponentArray__ = pointLightComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::PointLightData>>(*pointLightComponentArray) : 0;
  return flat::CreatePointLightComponentArrayData(
      _fbb,
      pointLightComponentArray__);
}

inline const flat::PointLightComponentArrayData *GetPointLightComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::PointLightComponentArrayData>(buf);
}

inline const flat::PointLightComponentArrayData *GetSizePrefixedPointLightComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::PointLightComponentArrayData>(buf);
}

inline bool VerifyPointLightComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::PointLightComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedPointLightComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::PointLightComponentArrayData>(nullptr);
}

inline void FinishPointLightComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::PointLightComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPointLightComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::PointLightComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_POINTLIGHTCOMPONENTARRAYDATA_FLAT_H_
