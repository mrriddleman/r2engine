// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EDITORCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_EDITORCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct EditorComponentData;
struct EditorComponentDataBuilder;

struct EditorComponentArrayData;
struct EditorComponentArrayDataBuilder;

struct EditorComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EditorComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EDITORNAME = 4,
    VT_FLAGS = 6
  };
  const flatbuffers::String *editorName() const {
    return GetPointer<const flatbuffers::String *>(VT_EDITORNAME);
  }
  uint32_t flags() const {
    return GetField<uint32_t>(VT_FLAGS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EDITORNAME) &&
           verifier.VerifyString(editorName()) &&
           VerifyField<uint32_t>(verifier, VT_FLAGS) &&
           verifier.EndTable();
  }
};

struct EditorComponentDataBuilder {
  typedef EditorComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_editorName(flatbuffers::Offset<flatbuffers::String> editorName) {
    fbb_.AddOffset(EditorComponentData::VT_EDITORNAME, editorName);
  }
  void add_flags(uint32_t flags) {
    fbb_.AddElement<uint32_t>(EditorComponentData::VT_FLAGS, flags, 0);
  }
  explicit EditorComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EditorComponentDataBuilder &operator=(const EditorComponentDataBuilder &);
  flatbuffers::Offset<EditorComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EditorComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<EditorComponentData> CreateEditorComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> editorName = 0,
    uint32_t flags = 0) {
  EditorComponentDataBuilder builder_(_fbb);
  builder_.add_flags(flags);
  builder_.add_editorName(editorName);
  return builder_.Finish();
}

inline flatbuffers::Offset<EditorComponentData> CreateEditorComponentDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *editorName = nullptr,
    uint32_t flags = 0) {
  auto editorName__ = editorName ? _fbb.CreateString(editorName) : 0;
  return flat::CreateEditorComponentData(
      _fbb,
      editorName__,
      flags);
}

struct EditorComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EditorComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EDITORCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::EditorComponentData>> *editorComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::EditorComponentData>> *>(VT_EDITORCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EDITORCOMPONENTARRAY) &&
           verifier.VerifyVector(editorComponentArray()) &&
           verifier.VerifyVectorOfTables(editorComponentArray()) &&
           verifier.EndTable();
  }
};

struct EditorComponentArrayDataBuilder {
  typedef EditorComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_editorComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::EditorComponentData>>> editorComponentArray) {
    fbb_.AddOffset(EditorComponentArrayData::VT_EDITORCOMPONENTARRAY, editorComponentArray);
  }
  explicit EditorComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EditorComponentArrayDataBuilder &operator=(const EditorComponentArrayDataBuilder &);
  flatbuffers::Offset<EditorComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EditorComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<EditorComponentArrayData> CreateEditorComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::EditorComponentData>>> editorComponentArray = 0) {
  EditorComponentArrayDataBuilder builder_(_fbb);
  builder_.add_editorComponentArray(editorComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<EditorComponentArrayData> CreateEditorComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::EditorComponentData>> *editorComponentArray = nullptr) {
  auto editorComponentArray__ = editorComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::EditorComponentData>>(*editorComponentArray) : 0;
  return flat::CreateEditorComponentArrayData(
      _fbb,
      editorComponentArray__);
}

inline const flat::EditorComponentArrayData *GetEditorComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::EditorComponentArrayData>(buf);
}

inline const flat::EditorComponentArrayData *GetSizePrefixedEditorComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::EditorComponentArrayData>(buf);
}

inline bool VerifyEditorComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::EditorComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedEditorComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::EditorComponentArrayData>(nullptr);
}

inline void FinishEditorComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::EditorComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEditorComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::EditorComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_EDITORCOMPONENTARRAYDATA_FLAT_H_
