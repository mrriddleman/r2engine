// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOLISTENERCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_AUDIOLISTENERCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct AudioListener;
struct AudioListenerBuilder;

struct AudioListenerComponentData;
struct AudioListenerComponentDataBuilder;

struct AudioListenerComponentArrayData;
struct AudioListenerComponentArrayDataBuilder;

struct AudioListener FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioListenerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LISTENER = 4
  };
  uint32_t listener() const {
    return GetField<uint32_t>(VT_LISTENER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_LISTENER) &&
           verifier.EndTable();
  }
};

struct AudioListenerBuilder {
  typedef AudioListener Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_listener(uint32_t listener) {
    fbb_.AddElement<uint32_t>(AudioListener::VT_LISTENER, listener, 0);
  }
  explicit AudioListenerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioListenerBuilder &operator=(const AudioListenerBuilder &);
  flatbuffers::Offset<AudioListener> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioListener>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioListener> CreateAudioListener(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t listener = 0) {
  AudioListenerBuilder builder_(_fbb);
  builder_.add_listener(listener);
  return builder_.Finish();
}

struct AudioListenerComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioListenerComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LISTENER = 4,
    VT_ENTITYTOFOLLOW = 6
  };
  const flat::AudioListener *listener() const {
    return GetPointer<const flat::AudioListener *>(VT_LISTENER);
  }
  uint32_t entityToFollow() const {
    return GetField<uint32_t>(VT_ENTITYTOFOLLOW, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LISTENER) &&
           verifier.VerifyTable(listener()) &&
           VerifyField<uint32_t>(verifier, VT_ENTITYTOFOLLOW) &&
           verifier.EndTable();
  }
};

struct AudioListenerComponentDataBuilder {
  typedef AudioListenerComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_listener(flatbuffers::Offset<flat::AudioListener> listener) {
    fbb_.AddOffset(AudioListenerComponentData::VT_LISTENER, listener);
  }
  void add_entityToFollow(uint32_t entityToFollow) {
    fbb_.AddElement<uint32_t>(AudioListenerComponentData::VT_ENTITYTOFOLLOW, entityToFollow, 0);
  }
  explicit AudioListenerComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioListenerComponentDataBuilder &operator=(const AudioListenerComponentDataBuilder &);
  flatbuffers::Offset<AudioListenerComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioListenerComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioListenerComponentData> CreateAudioListenerComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::AudioListener> listener = 0,
    uint32_t entityToFollow = 0) {
  AudioListenerComponentDataBuilder builder_(_fbb);
  builder_.add_entityToFollow(entityToFollow);
  builder_.add_listener(listener);
  return builder_.Finish();
}

struct AudioListenerComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioListenerComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUDIOLISTENERCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::AudioListenerComponentData>> *audioListenerComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AudioListenerComponentData>> *>(VT_AUDIOLISTENERCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AUDIOLISTENERCOMPONENTARRAY) &&
           verifier.VerifyVector(audioListenerComponentArray()) &&
           verifier.VerifyVectorOfTables(audioListenerComponentArray()) &&
           verifier.EndTable();
  }
};

struct AudioListenerComponentArrayDataBuilder {
  typedef AudioListenerComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_audioListenerComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioListenerComponentData>>> audioListenerComponentArray) {
    fbb_.AddOffset(AudioListenerComponentArrayData::VT_AUDIOLISTENERCOMPONENTARRAY, audioListenerComponentArray);
  }
  explicit AudioListenerComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioListenerComponentArrayDataBuilder &operator=(const AudioListenerComponentArrayDataBuilder &);
  flatbuffers::Offset<AudioListenerComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioListenerComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioListenerComponentArrayData> CreateAudioListenerComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioListenerComponentData>>> audioListenerComponentArray = 0) {
  AudioListenerComponentArrayDataBuilder builder_(_fbb);
  builder_.add_audioListenerComponentArray(audioListenerComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioListenerComponentArrayData> CreateAudioListenerComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::AudioListenerComponentData>> *audioListenerComponentArray = nullptr) {
  auto audioListenerComponentArray__ = audioListenerComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::AudioListenerComponentData>>(*audioListenerComponentArray) : 0;
  return flat::CreateAudioListenerComponentArrayData(
      _fbb,
      audioListenerComponentArray__);
}

inline const flat::AudioListenerComponentArrayData *GetAudioListenerComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::AudioListenerComponentArrayData>(buf);
}

inline const flat::AudioListenerComponentArrayData *GetSizePrefixedAudioListenerComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::AudioListenerComponentArrayData>(buf);
}

inline bool VerifyAudioListenerComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::AudioListenerComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedAudioListenerComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::AudioListenerComponentArrayData>(nullptr);
}

inline void FinishAudioListenerComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AudioListenerComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAudioListenerComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AudioListenerComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_AUDIOLISTENERCOMPONENTARRAYDATA_FLAT_H_
