// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRANSFORMCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_TRANSFORMCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct TransformComponentPosition;
struct TransformComponentPositionBuilder;

struct TransformComponentScale;
struct TransformComponentScaleBuilder;

struct TransformComponentRotation;
struct TransformComponentRotationBuilder;

struct TransformComponentData;
struct TransformComponentDataBuilder;

struct TransformComponentArrayData;
struct TransformComponentArrayDataBuilder;

struct TransformComponentPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct TransformComponentPositionBuilder {
  typedef TransformComponentPosition Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(TransformComponentPosition::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(TransformComponentPosition::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(TransformComponentPosition::VT_Z, z, 0.0f);
  }
  explicit TransformComponentPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentPositionBuilder &operator=(const TransformComponentPositionBuilder &);
  flatbuffers::Offset<TransformComponentPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponentPosition>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponentPosition> CreateTransformComponentPosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  TransformComponentPositionBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct TransformComponentScale FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentScaleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct TransformComponentScaleBuilder {
  typedef TransformComponentScale Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(TransformComponentScale::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(TransformComponentScale::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(TransformComponentScale::VT_Z, z, 0.0f);
  }
  explicit TransformComponentScaleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentScaleBuilder &operator=(const TransformComponentScaleBuilder &);
  flatbuffers::Offset<TransformComponentScale> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponentScale>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponentScale> CreateTransformComponentScale(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  TransformComponentScaleBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct TransformComponentRotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentRotationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_W = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  float w() const {
    return GetField<float>(VT_W, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           VerifyField<float>(verifier, VT_W) &&
           verifier.EndTable();
  }
};

struct TransformComponentRotationBuilder {
  typedef TransformComponentRotation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(TransformComponentRotation::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(TransformComponentRotation::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(TransformComponentRotation::VT_Z, z, 0.0f);
  }
  void add_w(float w) {
    fbb_.AddElement<float>(TransformComponentRotation::VT_W, w, 0.0f);
  }
  explicit TransformComponentRotationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentRotationBuilder &operator=(const TransformComponentRotationBuilder &);
  flatbuffers::Offset<TransformComponentRotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponentRotation>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponentRotation> CreateTransformComponentRotation(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    float w = 0.0f) {
  TransformComponentRotationBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct TransformComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_SCALE = 6,
    VT_ROTATION = 8
  };
  const flat::TransformComponentPosition *position() const {
    return GetPointer<const flat::TransformComponentPosition *>(VT_POSITION);
  }
  const flat::TransformComponentScale *scale() const {
    return GetPointer<const flat::TransformComponentScale *>(VT_SCALE);
  }
  const flat::TransformComponentRotation *rotation() const {
    return GetPointer<const flat::TransformComponentRotation *>(VT_ROTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(rotation()) &&
           verifier.EndTable();
  }
};

struct TransformComponentDataBuilder {
  typedef TransformComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(flatbuffers::Offset<flat::TransformComponentPosition> position) {
    fbb_.AddOffset(TransformComponentData::VT_POSITION, position);
  }
  void add_scale(flatbuffers::Offset<flat::TransformComponentScale> scale) {
    fbb_.AddOffset(TransformComponentData::VT_SCALE, scale);
  }
  void add_rotation(flatbuffers::Offset<flat::TransformComponentRotation> rotation) {
    fbb_.AddOffset(TransformComponentData::VT_ROTATION, rotation);
  }
  explicit TransformComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentDataBuilder &operator=(const TransformComponentDataBuilder &);
  flatbuffers::Offset<TransformComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponentData> CreateTransformComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flat::TransformComponentPosition> position = 0,
    flatbuffers::Offset<flat::TransformComponentScale> scale = 0,
    flatbuffers::Offset<flat::TransformComponentRotation> rotation = 0) {
  TransformComponentDataBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_scale(scale);
  builder_.add_position(position);
  return builder_.Finish();
}

struct TransformComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFORMCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::TransformComponentData>> *transformComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::TransformComponentData>> *>(VT_TRANSFORMCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANSFORMCOMPONENTARRAY) &&
           verifier.VerifyVector(transformComponentArray()) &&
           verifier.VerifyVectorOfTables(transformComponentArray()) &&
           verifier.EndTable();
  }
};

struct TransformComponentArrayDataBuilder {
  typedef TransformComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_transformComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::TransformComponentData>>> transformComponentArray) {
    fbb_.AddOffset(TransformComponentArrayData::VT_TRANSFORMCOMPONENTARRAY, transformComponentArray);
  }
  explicit TransformComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentArrayDataBuilder &operator=(const TransformComponentArrayDataBuilder &);
  flatbuffers::Offset<TransformComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponentArrayData> CreateTransformComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::TransformComponentData>>> transformComponentArray = 0) {
  TransformComponentArrayDataBuilder builder_(_fbb);
  builder_.add_transformComponentArray(transformComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<TransformComponentArrayData> CreateTransformComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::TransformComponentData>> *transformComponentArray = nullptr) {
  auto transformComponentArray__ = transformComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::TransformComponentData>>(*transformComponentArray) : 0;
  return flat::CreateTransformComponentArrayData(
      _fbb,
      transformComponentArray__);
}

inline const flat::TransformComponentArrayData *GetTransformComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::TransformComponentArrayData>(buf);
}

inline const flat::TransformComponentArrayData *GetSizePrefixedTransformComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::TransformComponentArrayData>(buf);
}

inline bool VerifyTransformComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::TransformComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedTransformComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::TransformComponentArrayData>(nullptr);
}

inline void FinishTransformComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TransformComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransformComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::TransformComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_TRANSFORMCOMPONENTARRAYDATA_FLAT_H_
