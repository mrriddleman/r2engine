// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEIRARCHYCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_HEIRARCHYCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct HeirarchyComponentData;
struct HeirarchyComponentDataBuilder;

struct HeirarchyComponentArrayData;
struct HeirarchyComponentArrayDataBuilder;

struct HeirarchyComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeirarchyComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARENT = 4
  };
  uint32_t parent() const {
    return GetField<uint32_t>(VT_PARENT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PARENT) &&
           verifier.EndTable();
  }
};

struct HeirarchyComponentDataBuilder {
  typedef HeirarchyComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_parent(uint32_t parent) {
    fbb_.AddElement<uint32_t>(HeirarchyComponentData::VT_PARENT, parent, 0);
  }
  explicit HeirarchyComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeirarchyComponentDataBuilder &operator=(const HeirarchyComponentDataBuilder &);
  flatbuffers::Offset<HeirarchyComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeirarchyComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeirarchyComponentData> CreateHeirarchyComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t parent = 0) {
  HeirarchyComponentDataBuilder builder_(_fbb);
  builder_.add_parent(parent);
  return builder_.Finish();
}

struct HeirarchyComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeirarchyComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEIRARCHYCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::HeirarchyComponentData>> *heirarchyComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::HeirarchyComponentData>> *>(VT_HEIRARCHYCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEIRARCHYCOMPONENTARRAY) &&
           verifier.VerifyVector(heirarchyComponentArray()) &&
           verifier.VerifyVectorOfTables(heirarchyComponentArray()) &&
           verifier.EndTable();
  }
};

struct HeirarchyComponentArrayDataBuilder {
  typedef HeirarchyComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_heirarchyComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::HeirarchyComponentData>>> heirarchyComponentArray) {
    fbb_.AddOffset(HeirarchyComponentArrayData::VT_HEIRARCHYCOMPONENTARRAY, heirarchyComponentArray);
  }
  explicit HeirarchyComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeirarchyComponentArrayDataBuilder &operator=(const HeirarchyComponentArrayDataBuilder &);
  flatbuffers::Offset<HeirarchyComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeirarchyComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeirarchyComponentArrayData> CreateHeirarchyComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::HeirarchyComponentData>>> heirarchyComponentArray = 0) {
  HeirarchyComponentArrayDataBuilder builder_(_fbb);
  builder_.add_heirarchyComponentArray(heirarchyComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeirarchyComponentArrayData> CreateHeirarchyComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::HeirarchyComponentData>> *heirarchyComponentArray = nullptr) {
  auto heirarchyComponentArray__ = heirarchyComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::HeirarchyComponentData>>(*heirarchyComponentArray) : 0;
  return flat::CreateHeirarchyComponentArrayData(
      _fbb,
      heirarchyComponentArray__);
}

inline const flat::HeirarchyComponentArrayData *GetHeirarchyComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::HeirarchyComponentArrayData>(buf);
}

inline const flat::HeirarchyComponentArrayData *GetSizePrefixedHeirarchyComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::HeirarchyComponentArrayData>(buf);
}

inline bool VerifyHeirarchyComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::HeirarchyComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedHeirarchyComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::HeirarchyComponentArrayData>(nullptr);
}

inline void FinishHeirarchyComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::HeirarchyComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeirarchyComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::HeirarchyComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_HEIRARCHYCOMPONENTARRAYDATA_FLAT_H_
