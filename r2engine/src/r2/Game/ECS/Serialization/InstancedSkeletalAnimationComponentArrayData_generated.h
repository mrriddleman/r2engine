// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INSTANCEDSKELETALANIMATIONCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_INSTANCEDSKELETALANIMATIONCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "SkeletalAnimationComponentArrayData_generated.h"

namespace flat {

struct InstancedSkeletalAnimationComponentArrayData;
struct InstancedSkeletalAnimationComponentArrayDataBuilder;

struct InstancedSkeletalAnimationComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InstancedSkeletalAnimationComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTANCEDSKELETALANIMATIONCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>> *instancedSkeletalAnimationComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>> *>(VT_INSTANCEDSKELETALANIMATIONCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTANCEDSKELETALANIMATIONCOMPONENTARRAY) &&
           verifier.VerifyVector(instancedSkeletalAnimationComponentArray()) &&
           verifier.VerifyVectorOfTables(instancedSkeletalAnimationComponentArray()) &&
           verifier.EndTable();
  }
};

struct InstancedSkeletalAnimationComponentArrayDataBuilder {
  typedef InstancedSkeletalAnimationComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_instancedSkeletalAnimationComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>>> instancedSkeletalAnimationComponentArray) {
    fbb_.AddOffset(InstancedSkeletalAnimationComponentArrayData::VT_INSTANCEDSKELETALANIMATIONCOMPONENTARRAY, instancedSkeletalAnimationComponentArray);
  }
  explicit InstancedSkeletalAnimationComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InstancedSkeletalAnimationComponentArrayDataBuilder &operator=(const InstancedSkeletalAnimationComponentArrayDataBuilder &);
  flatbuffers::Offset<InstancedSkeletalAnimationComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InstancedSkeletalAnimationComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<InstancedSkeletalAnimationComponentArrayData> CreateInstancedSkeletalAnimationComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>>> instancedSkeletalAnimationComponentArray = 0) {
  InstancedSkeletalAnimationComponentArrayDataBuilder builder_(_fbb);
  builder_.add_instancedSkeletalAnimationComponentArray(instancedSkeletalAnimationComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<InstancedSkeletalAnimationComponentArrayData> CreateInstancedSkeletalAnimationComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>> *instancedSkeletalAnimationComponentArray = nullptr) {
  auto instancedSkeletalAnimationComponentArray__ = instancedSkeletalAnimationComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::SkeletalAnimationComponentArrayData>>(*instancedSkeletalAnimationComponentArray) : 0;
  return flat::CreateInstancedSkeletalAnimationComponentArrayData(
      _fbb,
      instancedSkeletalAnimationComponentArray__);
}

inline const flat::InstancedSkeletalAnimationComponentArrayData *GetInstancedSkeletalAnimationComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::InstancedSkeletalAnimationComponentArrayData>(buf);
}

inline const flat::InstancedSkeletalAnimationComponentArrayData *GetSizePrefixedInstancedSkeletalAnimationComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::InstancedSkeletalAnimationComponentArrayData>(buf);
}

inline bool VerifyInstancedSkeletalAnimationComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::InstancedSkeletalAnimationComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedInstancedSkeletalAnimationComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::InstancedSkeletalAnimationComponentArrayData>(nullptr);
}

inline void FinishInstancedSkeletalAnimationComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::InstancedSkeletalAnimationComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInstancedSkeletalAnimationComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::InstancedSkeletalAnimationComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_INSTANCEDSKELETALANIMATIONCOMPONENTARRAYDATA_FLAT_H_
