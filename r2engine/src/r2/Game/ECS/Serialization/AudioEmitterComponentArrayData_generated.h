// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOEMITTERCOMPONENTARRAYDATA_FLAT_H_
#define FLATBUFFERS_GENERATED_AUDIOEMITTERCOMPONENTARRAYDATA_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct AudioEmitterParameter;
struct AudioEmitterParameterBuilder;

struct AudioEmitterComponentData;
struct AudioEmitterComponentDataBuilder;

struct AudioEmitterComponentArrayData;
struct AudioEmitterComponentArrayDataBuilder;

enum AudioEmitterStartCondition {
  AudioEmitterStartCondition_PLAY_ON_CREATE = 0,
  AudioEmitterStartCondition_PLAY_ON_EVENT = 1,
  AudioEmitterStartCondition_NUM_AUDIO_EMITTER_START_TYPES = 2,
  AudioEmitterStartCondition_MIN = AudioEmitterStartCondition_PLAY_ON_CREATE,
  AudioEmitterStartCondition_MAX = AudioEmitterStartCondition_NUM_AUDIO_EMITTER_START_TYPES
};

inline const AudioEmitterStartCondition (&EnumValuesAudioEmitterStartCondition())[3] {
  static const AudioEmitterStartCondition values[] = {
    AudioEmitterStartCondition_PLAY_ON_CREATE,
    AudioEmitterStartCondition_PLAY_ON_EVENT,
    AudioEmitterStartCondition_NUM_AUDIO_EMITTER_START_TYPES
  };
  return values;
}

inline const char * const *EnumNamesAudioEmitterStartCondition() {
  static const char * const names[4] = {
    "PLAY_ON_CREATE",
    "PLAY_ON_EVENT",
    "NUM_AUDIO_EMITTER_START_TYPES",
    nullptr
  };
  return names;
}

inline const char *EnumNameAudioEmitterStartCondition(AudioEmitterStartCondition e) {
  if (flatbuffers::IsOutRange(e, AudioEmitterStartCondition_PLAY_ON_CREATE, AudioEmitterStartCondition_NUM_AUDIO_EMITTER_START_TYPES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAudioEmitterStartCondition()[index];
}

struct AudioEmitterParameter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioEmitterParameterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARAMETERNAME = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *parameterName() const {
    return GetPointer<const flatbuffers::String *>(VT_PARAMETERNAME);
  }
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARAMETERNAME) &&
           verifier.VerifyString(parameterName()) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct AudioEmitterParameterBuilder {
  typedef AudioEmitterParameter Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_parameterName(flatbuffers::Offset<flatbuffers::String> parameterName) {
    fbb_.AddOffset(AudioEmitterParameter::VT_PARAMETERNAME, parameterName);
  }
  void add_value(float value) {
    fbb_.AddElement<float>(AudioEmitterParameter::VT_VALUE, value, 0.0f);
  }
  explicit AudioEmitterParameterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioEmitterParameterBuilder &operator=(const AudioEmitterParameterBuilder &);
  flatbuffers::Offset<AudioEmitterParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioEmitterParameter>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioEmitterParameter> CreateAudioEmitterParameter(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> parameterName = 0,
    float value = 0.0f) {
  AudioEmitterParameterBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_parameterName(parameterName);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioEmitterParameter> CreateAudioEmitterParameterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *parameterName = nullptr,
    float value = 0.0f) {
  auto parameterName__ = parameterName ? _fbb.CreateString(parameterName) : 0;
  return flat::CreateAudioEmitterParameter(
      _fbb,
      parameterName__,
      value);
}

struct AudioEmitterComponentData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioEmitterComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTNAME = 4,
    VT_STARTCONDITION = 6,
    VT_PARAMETERS = 8,
    VT_ALLOWFADEOUTWHENSTOPPING = 10,
    VT_RELEASEAFTERPLAY = 12
  };
  const flatbuffers::String *eventName() const {
    return GetPointer<const flatbuffers::String *>(VT_EVENTNAME);
  }
  flat::AudioEmitterStartCondition startCondition() const {
    return static_cast<flat::AudioEmitterStartCondition>(GetField<uint8_t>(VT_STARTCONDITION, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterParameter>> *parameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterParameter>> *>(VT_PARAMETERS);
  }
  bool allowFadeoutWhenStopping() const {
    return GetField<uint8_t>(VT_ALLOWFADEOUTWHENSTOPPING, 0) != 0;
  }
  bool releaseAfterPlay() const {
    return GetField<uint8_t>(VT_RELEASEAFTERPLAY, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTNAME) &&
           verifier.VerifyString(eventName()) &&
           VerifyField<uint8_t>(verifier, VT_STARTCONDITION) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfTables(parameters()) &&
           VerifyField<uint8_t>(verifier, VT_ALLOWFADEOUTWHENSTOPPING) &&
           VerifyField<uint8_t>(verifier, VT_RELEASEAFTERPLAY) &&
           verifier.EndTable();
  }
};

struct AudioEmitterComponentDataBuilder {
  typedef AudioEmitterComponentData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_eventName(flatbuffers::Offset<flatbuffers::String> eventName) {
    fbb_.AddOffset(AudioEmitterComponentData::VT_EVENTNAME, eventName);
  }
  void add_startCondition(flat::AudioEmitterStartCondition startCondition) {
    fbb_.AddElement<uint8_t>(AudioEmitterComponentData::VT_STARTCONDITION, static_cast<uint8_t>(startCondition), 0);
  }
  void add_parameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterParameter>>> parameters) {
    fbb_.AddOffset(AudioEmitterComponentData::VT_PARAMETERS, parameters);
  }
  void add_allowFadeoutWhenStopping(bool allowFadeoutWhenStopping) {
    fbb_.AddElement<uint8_t>(AudioEmitterComponentData::VT_ALLOWFADEOUTWHENSTOPPING, static_cast<uint8_t>(allowFadeoutWhenStopping), 0);
  }
  void add_releaseAfterPlay(bool releaseAfterPlay) {
    fbb_.AddElement<uint8_t>(AudioEmitterComponentData::VT_RELEASEAFTERPLAY, static_cast<uint8_t>(releaseAfterPlay), 0);
  }
  explicit AudioEmitterComponentDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioEmitterComponentDataBuilder &operator=(const AudioEmitterComponentDataBuilder &);
  flatbuffers::Offset<AudioEmitterComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioEmitterComponentData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioEmitterComponentData> CreateAudioEmitterComponentData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> eventName = 0,
    flat::AudioEmitterStartCondition startCondition = flat::AudioEmitterStartCondition_PLAY_ON_CREATE,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterParameter>>> parameters = 0,
    bool allowFadeoutWhenStopping = false,
    bool releaseAfterPlay = false) {
  AudioEmitterComponentDataBuilder builder_(_fbb);
  builder_.add_parameters(parameters);
  builder_.add_eventName(eventName);
  builder_.add_releaseAfterPlay(releaseAfterPlay);
  builder_.add_allowFadeoutWhenStopping(allowFadeoutWhenStopping);
  builder_.add_startCondition(startCondition);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioEmitterComponentData> CreateAudioEmitterComponentDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *eventName = nullptr,
    flat::AudioEmitterStartCondition startCondition = flat::AudioEmitterStartCondition_PLAY_ON_CREATE,
    const std::vector<flatbuffers::Offset<flat::AudioEmitterParameter>> *parameters = nullptr,
    bool allowFadeoutWhenStopping = false,
    bool releaseAfterPlay = false) {
  auto eventName__ = eventName ? _fbb.CreateString(eventName) : 0;
  auto parameters__ = parameters ? _fbb.CreateVector<flatbuffers::Offset<flat::AudioEmitterParameter>>(*parameters) : 0;
  return flat::CreateAudioEmitterComponentData(
      _fbb,
      eventName__,
      startCondition,
      parameters__,
      allowFadeoutWhenStopping,
      releaseAfterPlay);
}

struct AudioEmitterComponentArrayData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioEmitterComponentArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUDIOEMITTERCOMPONENTARRAY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterComponentData>> *audioEmitterComponentArray() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterComponentData>> *>(VT_AUDIOEMITTERCOMPONENTARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AUDIOEMITTERCOMPONENTARRAY) &&
           verifier.VerifyVector(audioEmitterComponentArray()) &&
           verifier.VerifyVectorOfTables(audioEmitterComponentArray()) &&
           verifier.EndTable();
  }
};

struct AudioEmitterComponentArrayDataBuilder {
  typedef AudioEmitterComponentArrayData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_audioEmitterComponentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterComponentData>>> audioEmitterComponentArray) {
    fbb_.AddOffset(AudioEmitterComponentArrayData::VT_AUDIOEMITTERCOMPONENTARRAY, audioEmitterComponentArray);
  }
  explicit AudioEmitterComponentArrayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioEmitterComponentArrayDataBuilder &operator=(const AudioEmitterComponentArrayDataBuilder &);
  flatbuffers::Offset<AudioEmitterComponentArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioEmitterComponentArrayData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioEmitterComponentArrayData> CreateAudioEmitterComponentArrayData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::AudioEmitterComponentData>>> audioEmitterComponentArray = 0) {
  AudioEmitterComponentArrayDataBuilder builder_(_fbb);
  builder_.add_audioEmitterComponentArray(audioEmitterComponentArray);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioEmitterComponentArrayData> CreateAudioEmitterComponentArrayDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flat::AudioEmitterComponentData>> *audioEmitterComponentArray = nullptr) {
  auto audioEmitterComponentArray__ = audioEmitterComponentArray ? _fbb.CreateVector<flatbuffers::Offset<flat::AudioEmitterComponentData>>(*audioEmitterComponentArray) : 0;
  return flat::CreateAudioEmitterComponentArrayData(
      _fbb,
      audioEmitterComponentArray__);
}

inline const flat::AudioEmitterComponentArrayData *GetAudioEmitterComponentArrayData(const void *buf) {
  return flatbuffers::GetRoot<flat::AudioEmitterComponentArrayData>(buf);
}

inline const flat::AudioEmitterComponentArrayData *GetSizePrefixedAudioEmitterComponentArrayData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::AudioEmitterComponentArrayData>(buf);
}

inline bool VerifyAudioEmitterComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::AudioEmitterComponentArrayData>(nullptr);
}

inline bool VerifySizePrefixedAudioEmitterComponentArrayDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::AudioEmitterComponentArrayData>(nullptr);
}

inline void FinishAudioEmitterComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AudioEmitterComponentArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAudioEmitterComponentArrayDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::AudioEmitterComponentArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_AUDIOEMITTERCOMPONENTARRAYDATA_FLAT_H_
