// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EDITORINSPECTIONCOMPONENT_FLAT_H_
#define FLATBUFFERS_GENERATED_EDITORINSPECTIONCOMPONENT_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct EditorImGuiFieldData;
struct EditorImGuiFieldDataBuilder;

struct EditorInspectionField;
struct EditorInspectionFieldBuilder;

struct EditorInspectionComponent;
struct EditorInspectionComponentBuilder;

enum EditorFieldValueType {
  EditorFieldValueType_INT = 0,
  EditorFieldValueType_UINT = 1,
  EditorFieldValueType_BOOL = 2,
  EditorFieldValueType_FLOAT = 3,
  EditorFieldValueType_STRING = 4,
  EditorFieldValueType_INT_ARRAY = 5,
  EditorFieldValueType_UINT_ARRAY = 6,
  EditorFieldValueType_FLOAT_ARRAY = 7,
  EditorFieldValueType_BOOL_ARRAY = 8,
  EditorFieldValueType_STRING_ARRAY = 9,
  EditorFieldValueType_MIN = EditorFieldValueType_INT,
  EditorFieldValueType_MAX = EditorFieldValueType_STRING_ARRAY
};

inline const EditorFieldValueType (&EnumValuesEditorFieldValueType())[10] {
  static const EditorFieldValueType values[] = {
    EditorFieldValueType_INT,
    EditorFieldValueType_UINT,
    EditorFieldValueType_BOOL,
    EditorFieldValueType_FLOAT,
    EditorFieldValueType_STRING,
    EditorFieldValueType_INT_ARRAY,
    EditorFieldValueType_UINT_ARRAY,
    EditorFieldValueType_FLOAT_ARRAY,
    EditorFieldValueType_BOOL_ARRAY,
    EditorFieldValueType_STRING_ARRAY
  };
  return values;
}

inline const char * const *EnumNamesEditorFieldValueType() {
  static const char * const names[11] = {
    "INT",
    "UINT",
    "BOOL",
    "FLOAT",
    "STRING",
    "INT_ARRAY",
    "UINT_ARRAY",
    "FLOAT_ARRAY",
    "BOOL_ARRAY",
    "STRING_ARRAY",
    nullptr
  };
  return names;
}

inline const char *EnumNameEditorFieldValueType(EditorFieldValueType e) {
  if (flatbuffers::IsOutRange(e, EditorFieldValueType_INT, EditorFieldValueType_STRING_ARRAY)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEditorFieldValueType()[index];
}

enum EditorFieldType {
  EditorFieldType_NORMAL = 0,
  EditorFieldType_COMPONENT_REFERENCE = 1,
  EditorFieldType_MIN = EditorFieldType_NORMAL,
  EditorFieldType_MAX = EditorFieldType_COMPONENT_REFERENCE
};

inline const EditorFieldType (&EnumValuesEditorFieldType())[2] {
  static const EditorFieldType values[] = {
    EditorFieldType_NORMAL,
    EditorFieldType_COMPONENT_REFERENCE
  };
  return values;
}

inline const char * const *EnumNamesEditorFieldType() {
  static const char * const names[3] = {
    "NORMAL",
    "COMPONENT_REFERENCE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEditorFieldType(EditorFieldType e) {
  if (flatbuffers::IsOutRange(e, EditorFieldType_NORMAL, EditorFieldType_COMPONENT_REFERENCE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEditorFieldType()[index];
}

struct EditorImGuiFieldData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EditorImGuiFieldDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDGET = 4
  };
  const flatbuffers::String *widget() const {
    return GetPointer<const flatbuffers::String *>(VT_WIDGET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WIDGET) &&
           verifier.VerifyString(widget()) &&
           verifier.EndTable();
  }
};

struct EditorImGuiFieldDataBuilder {
  typedef EditorImGuiFieldData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_widget(flatbuffers::Offset<flatbuffers::String> widget) {
    fbb_.AddOffset(EditorImGuiFieldData::VT_WIDGET, widget);
  }
  explicit EditorImGuiFieldDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EditorImGuiFieldDataBuilder &operator=(const EditorImGuiFieldDataBuilder &);
  flatbuffers::Offset<EditorImGuiFieldData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EditorImGuiFieldData>(end);
    return o;
  }
};

inline flatbuffers::Offset<EditorImGuiFieldData> CreateEditorImGuiFieldData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> widget = 0) {
  EditorImGuiFieldDataBuilder builder_(_fbb);
  builder_.add_widget(widget);
  return builder_.Finish();
}

inline flatbuffers::Offset<EditorImGuiFieldData> CreateEditorImGuiFieldDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *widget = nullptr) {
  auto widget__ = widget ? _fbb.CreateString(widget) : 0;
  return flat::CreateEditorImGuiFieldData(
      _fbb,
      widget__);
}

struct EditorInspectionField FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EditorInspectionFieldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FIELDTYPE = 6,
    VT_VALUETYPE = 8,
    VT_MINVALUE = 10,
    VT_MAXVALUE = 12,
    VT_DISPLAY = 14,
    VT_IMGUIDATA = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flat::EditorFieldType fieldType() const {
    return static_cast<flat::EditorFieldType>(GetField<uint32_t>(VT_FIELDTYPE, 0));
  }
  flat::EditorFieldValueType valueType() const {
    return static_cast<flat::EditorFieldValueType>(GetField<uint32_t>(VT_VALUETYPE, 0));
  }
  float minValue() const {
    return GetField<float>(VT_MINVALUE, 0.0f);
  }
  float maxValue() const {
    return GetField<float>(VT_MAXVALUE, 0.0f);
  }
  const flatbuffers::String *display() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY);
  }
  const flat::EditorImGuiFieldData *imguiData() const {
    return GetPointer<const flat::EditorImGuiFieldData *>(VT_IMGUIDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_FIELDTYPE) &&
           VerifyField<uint32_t>(verifier, VT_VALUETYPE) &&
           VerifyField<float>(verifier, VT_MINVALUE) &&
           VerifyField<float>(verifier, VT_MAXVALUE) &&
           VerifyOffset(verifier, VT_DISPLAY) &&
           verifier.VerifyString(display()) &&
           VerifyOffset(verifier, VT_IMGUIDATA) &&
           verifier.VerifyTable(imguiData()) &&
           verifier.EndTable();
  }
};

struct EditorInspectionFieldBuilder {
  typedef EditorInspectionField Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(EditorInspectionField::VT_NAME, name);
  }
  void add_fieldType(flat::EditorFieldType fieldType) {
    fbb_.AddElement<uint32_t>(EditorInspectionField::VT_FIELDTYPE, static_cast<uint32_t>(fieldType), 0);
  }
  void add_valueType(flat::EditorFieldValueType valueType) {
    fbb_.AddElement<uint32_t>(EditorInspectionField::VT_VALUETYPE, static_cast<uint32_t>(valueType), 0);
  }
  void add_minValue(float minValue) {
    fbb_.AddElement<float>(EditorInspectionField::VT_MINVALUE, minValue, 0.0f);
  }
  void add_maxValue(float maxValue) {
    fbb_.AddElement<float>(EditorInspectionField::VT_MAXVALUE, maxValue, 0.0f);
  }
  void add_display(flatbuffers::Offset<flatbuffers::String> display) {
    fbb_.AddOffset(EditorInspectionField::VT_DISPLAY, display);
  }
  void add_imguiData(flatbuffers::Offset<flat::EditorImGuiFieldData> imguiData) {
    fbb_.AddOffset(EditorInspectionField::VT_IMGUIDATA, imguiData);
  }
  explicit EditorInspectionFieldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EditorInspectionFieldBuilder &operator=(const EditorInspectionFieldBuilder &);
  flatbuffers::Offset<EditorInspectionField> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EditorInspectionField>(end);
    return o;
  }
};

inline flatbuffers::Offset<EditorInspectionField> CreateEditorInspectionField(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flat::EditorFieldType fieldType = flat::EditorFieldType_NORMAL,
    flat::EditorFieldValueType valueType = flat::EditorFieldValueType_INT,
    float minValue = 0.0f,
    float maxValue = 0.0f,
    flatbuffers::Offset<flatbuffers::String> display = 0,
    flatbuffers::Offset<flat::EditorImGuiFieldData> imguiData = 0) {
  EditorInspectionFieldBuilder builder_(_fbb);
  builder_.add_imguiData(imguiData);
  builder_.add_display(display);
  builder_.add_maxValue(maxValue);
  builder_.add_minValue(minValue);
  builder_.add_valueType(valueType);
  builder_.add_fieldType(fieldType);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<EditorInspectionField> CreateEditorInspectionFieldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flat::EditorFieldType fieldType = flat::EditorFieldType_NORMAL,
    flat::EditorFieldValueType valueType = flat::EditorFieldValueType_INT,
    float minValue = 0.0f,
    float maxValue = 0.0f,
    const char *display = nullptr,
    flatbuffers::Offset<flat::EditorImGuiFieldData> imguiData = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto display__ = display ? _fbb.CreateString(display) : 0;
  return flat::CreateEditorInspectionField(
      _fbb,
      name__,
      fieldType,
      valueType,
      minValue,
      maxValue,
      display__,
      imguiData);
}

struct EditorInspectionComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EditorInspectionComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_COMPONENTTYPEREFERENCE = 6,
    VT_INSTANCED = 8,
    VT_FIELDS = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *componentTypeReference() const {
    return GetPointer<const flatbuffers::String *>(VT_COMPONENTTYPEREFERENCE);
  }
  bool instanced() const {
    return GetField<uint8_t>(VT_INSTANCED, 0) != 0;
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::EditorInspectionField>> *fields() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::EditorInspectionField>> *>(VT_FIELDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_COMPONENTTYPEREFERENCE) &&
           verifier.VerifyString(componentTypeReference()) &&
           VerifyField<uint8_t>(verifier, VT_INSTANCED) &&
           VerifyOffset(verifier, VT_FIELDS) &&
           verifier.VerifyVector(fields()) &&
           verifier.VerifyVectorOfTables(fields()) &&
           verifier.EndTable();
  }
};

struct EditorInspectionComponentBuilder {
  typedef EditorInspectionComponent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(EditorInspectionComponent::VT_NAME, name);
  }
  void add_componentTypeReference(flatbuffers::Offset<flatbuffers::String> componentTypeReference) {
    fbb_.AddOffset(EditorInspectionComponent::VT_COMPONENTTYPEREFERENCE, componentTypeReference);
  }
  void add_instanced(bool instanced) {
    fbb_.AddElement<uint8_t>(EditorInspectionComponent::VT_INSTANCED, static_cast<uint8_t>(instanced), 0);
  }
  void add_fields(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::EditorInspectionField>>> fields) {
    fbb_.AddOffset(EditorInspectionComponent::VT_FIELDS, fields);
  }
  explicit EditorInspectionComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EditorInspectionComponentBuilder &operator=(const EditorInspectionComponentBuilder &);
  flatbuffers::Offset<EditorInspectionComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EditorInspectionComponent>(end);
    return o;
  }
};

inline flatbuffers::Offset<EditorInspectionComponent> CreateEditorInspectionComponent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> componentTypeReference = 0,
    bool instanced = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::EditorInspectionField>>> fields = 0) {
  EditorInspectionComponentBuilder builder_(_fbb);
  builder_.add_fields(fields);
  builder_.add_componentTypeReference(componentTypeReference);
  builder_.add_name(name);
  builder_.add_instanced(instanced);
  return builder_.Finish();
}

inline flatbuffers::Offset<EditorInspectionComponent> CreateEditorInspectionComponentDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *componentTypeReference = nullptr,
    bool instanced = false,
    const std::vector<flatbuffers::Offset<flat::EditorInspectionField>> *fields = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto componentTypeReference__ = componentTypeReference ? _fbb.CreateString(componentTypeReference) : 0;
  auto fields__ = fields ? _fbb.CreateVector<flatbuffers::Offset<flat::EditorInspectionField>>(*fields) : 0;
  return flat::CreateEditorInspectionComponent(
      _fbb,
      name__,
      componentTypeReference__,
      instanced,
      fields__);
}

inline const flat::EditorInspectionComponent *GetEditorInspectionComponent(const void *buf) {
  return flatbuffers::GetRoot<flat::EditorInspectionComponent>(buf);
}

inline const flat::EditorInspectionComponent *GetSizePrefixedEditorInspectionComponent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::EditorInspectionComponent>(buf);
}

inline bool VerifyEditorInspectionComponentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::EditorInspectionComponent>(nullptr);
}

inline bool VerifySizePrefixedEditorInspectionComponentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::EditorInspectionComponent>(nullptr);
}

inline void FinishEditorInspectionComponentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::EditorInspectionComponent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEditorInspectionComponentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::EditorInspectionComponent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_EDITORINSPECTIONCOMPONENT_FLAT_H_
